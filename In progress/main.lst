CCS PCM C Compiler, Version 5.026, 18875               28-Nov-17 17:00

               Filename:   D:\University\Master\Digital Instrumentation\DTULidar\In progress\main.lst

               ROM used:   231 words (3%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           19 (5%) worst case
               Stack used: 0 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   0A2
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ICD=true 
.................... #device ADC=10 
....................   
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................   
.................... #use delay(internal=8000000,clock_out) 
*
008C:  MOVLW  29
008D:  MOVWF  04
008E:  BCF    03.7
008F:  MOVF   00,W
0090:  BTFSC  03.2
0091:  GOTO   09F
0092:  MOVLW  02
0093:  MOVWF  78
0094:  CLRF   77
0095:  DECFSZ 77,F
0096:  GOTO   095
0097:  DECFSZ 78,F
0098:  GOTO   094
0099:  MOVLW  97
009A:  MOVWF  77
009B:  DECFSZ 77,F
009C:  GOTO   09B
009D:  DECFSZ 00,F
009E:  GOTO   092
009F:  BCF    0A.3
00A0:  BCF    0A.4
00A1:  GOTO   0E4 (RETURN)
....................   
.................... #use rs232( baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, ERRORS) 
....................   
.................... //#use RS232 (DEBUGGER) 
....................   
.................... #use  I2C(master, sda=PIN_C4, scl= PIN_C3) 
....................  
....................  
....................  
.................... struct packet_t 
.................... { 
....................   unsigned int16 zAngle; 
....................   unsigned int16 yAngle; 
....................   unsigned int16 distance; 
.................... }; 
....................  
.................... void sendMeasurements(struct packet_t * sendPacket) 
.................... { 
....................    char characterToSend; 
....................    characterToSend = *((char*)&(sendPacket->zAngle)); 
*
000E:  MOVF   29,W
000F:  MOVWF  04
0010:  BCF    03.7
0011:  BTFSC  2A.0
0012:  BSF    03.7
0013:  MOVF   00,W
0014:  MOVWF  2B
....................    putc((int)characterToSend); 
0015:  MOVF   2B,W
0016:  BTFSS  0C.4
0017:  GOTO   016
0018:  MOVWF  19
....................    characterToSend = *(((char*)&(sendPacket->zAngle))+1); 
0019:  MOVLW  01
001A:  ADDWF  29,W
001B:  MOVWF  78
001C:  MOVF   2A,W
001D:  MOVWF  7A
001E:  BTFSC  03.0
001F:  INCF   7A,F
0020:  MOVF   78,W
0021:  MOVWF  04
0022:  BCF    03.7
0023:  BTFSC  7A.0
0024:  BSF    03.7
0025:  MOVF   00,W
0026:  MOVWF  2B
....................    putc((int)characterToSend); 
0027:  MOVF   2B,W
0028:  BTFSS  0C.4
0029:  GOTO   028
002A:  MOVWF  19
....................     
....................    characterToSend = *((char*)&(sendPacket->yAngle)); 
002B:  MOVLW  02
002C:  ADDWF  29,W
002D:  MOVWF  78
002E:  MOVF   2A,W
002F:  MOVWF  7A
0030:  BTFSC  03.0
0031:  INCF   7A,F
0032:  MOVF   78,W
0033:  MOVWF  04
0034:  BCF    03.7
0035:  BTFSC  7A.0
0036:  BSF    03.7
0037:  MOVF   00,W
0038:  MOVWF  2B
....................    putc((int)characterToSend); 
0039:  MOVF   2B,W
003A:  BTFSS  0C.4
003B:  GOTO   03A
003C:  MOVWF  19
....................    characterToSend = *(((char*)&(sendPacket->yAngle))+1); 
003D:  MOVLW  02
003E:  ADDWF  29,W
003F:  MOVWF  78
0040:  MOVF   2A,W
0041:  MOVWF  7A
0042:  BTFSC  03.0
0043:  INCF   7A,F
0044:  MOVF   78,W
0045:  MOVWF  2C
0046:  MOVF   7A,W
0047:  MOVWF  2D
0048:  MOVLW  01
0049:  ADDWF  78,W
004A:  MOVWF  78
004B:  MOVF   7A,W
004C:  MOVWF  7A
004D:  BTFSC  03.0
004E:  INCF   7A,F
004F:  MOVF   78,W
0050:  MOVWF  04
0051:  BCF    03.7
0052:  BTFSC  7A.0
0053:  BSF    03.7
0054:  MOVF   00,W
0055:  MOVWF  2B
....................    putc((int)characterToSend); 
0056:  MOVF   2B,W
0057:  BTFSS  0C.4
0058:  GOTO   057
0059:  MOVWF  19
....................     
....................    characterToSend = *((char*)&(sendPacket->distance)); 
005A:  MOVLW  04
005B:  ADDWF  29,W
005C:  MOVWF  78
005D:  MOVF   2A,W
005E:  MOVWF  7A
005F:  BTFSC  03.0
0060:  INCF   7A,F
0061:  MOVF   78,W
0062:  MOVWF  04
0063:  BCF    03.7
0064:  BTFSC  7A.0
0065:  BSF    03.7
0066:  MOVF   00,W
0067:  MOVWF  2B
....................    putc((int)characterToSend); 
0068:  MOVF   2B,W
0069:  BTFSS  0C.4
006A:  GOTO   069
006B:  MOVWF  19
....................    characterToSend = *(((char*)&(sendPacket->distance))+1); 
006C:  MOVLW  04
006D:  ADDWF  29,W
006E:  MOVWF  78
006F:  MOVF   2A,W
0070:  MOVWF  7A
0071:  BTFSC  03.0
0072:  INCF   7A,F
0073:  MOVF   78,W
0074:  MOVWF  2C
0075:  MOVF   7A,W
0076:  MOVWF  2D
0077:  MOVLW  01
0078:  ADDWF  78,W
0079:  MOVWF  78
007A:  MOVF   7A,W
007B:  MOVWF  7A
007C:  BTFSC  03.0
007D:  INCF   7A,F
007E:  MOVF   78,W
007F:  MOVWF  04
0080:  BCF    03.7
0081:  BTFSC  7A.0
0082:  BSF    03.7
0083:  MOVF   00,W
0084:  MOVWF  2B
....................    putc((int)characterToSend); 
0085:  MOVF   2B,W
0086:  BTFSS  0C.4
0087:  GOTO   086
0088:  MOVWF  19
0089:  BCF    0A.3
008A:  BCF    0A.4
008B:  GOTO   0E1 (RETURN)
....................    // (sendPacket->zAngle); 
....................    //test2 =  
....................   //printf("%lu", sendPacket->zAngle); 
.................... } 
....................  
.................... void init() 
.................... { 
....................   setup_oscillator(OSC_8MHZ,2); 
*
0004:  MOVLW  71
0005:  BSF    03.5
0006:  MOVWF  0F
0007:  MOVLW  02
0008:  MOVWF  10
0009:  MOVF   0F,W
000A:  BCF    03.5
000B:  BCF    0A.3
000C:  BCF    0A.4
000D:  GOTO   0CB (RETURN)
.................... } 
....................  
.................... void main() 
*
00A2:  MOVF   03,W
00A3:  ANDLW  1F
00A4:  MOVWF  03
00A5:  MOVLW  71
00A6:  BSF    03.5
00A7:  MOVWF  0F
00A8:  CLRF   10
00A9:  MOVF   0F,W
00AA:  BCF    03.5
00AB:  CLRF   20
00AC:  BSF    03.5
00AD:  BSF    03.6
00AE:  BCF    07.3
00AF:  MOVLW  0C
00B0:  BCF    03.6
00B1:  MOVWF  19
00B2:  MOVLW  A2
00B3:  MOVWF  18
00B4:  MOVLW  90
00B5:  BCF    03.5
00B6:  MOVWF  18
00B7:  MOVLW  FF
00B8:  MOVWF  21
00B9:  BSF    03.5
00BA:  BSF    03.6
00BB:  MOVF   09,W
00BC:  ANDLW  C0
00BD:  MOVWF  09
00BE:  BCF    03.6
00BF:  BCF    1F.4
00C0:  BCF    1F.5
00C1:  MOVLW  00
00C2:  BSF    03.6
00C3:  MOVWF  08
00C4:  BCF    03.5
00C5:  CLRF   07
00C6:  CLRF   08
00C7:  CLRF   09
00C8:  BCF    03.7
.................... { 
....................   init(); 
00C9:  BCF    03.6
00CA:  GOTO   004
....................  
....................   struct packet_t packetToSend; 
....................    
....................  
....................   int count = 0; 
00CB:  CLRF   28
....................  
....................   while(1) 
....................   { 
....................   packetToSend.zAngle   = 1234+count; 
00CC:  MOVLW  D2
00CD:  ADDWF  28,W
00CE:  MOVWF  22
00CF:  MOVLW  04
00D0:  MOVWF  23
00D1:  BTFSC  03.0
00D2:  INCF   23,F
....................   packetToSend.yAngle   = 5678+count; 
00D3:  MOVLW  2E
00D4:  ADDWF  28,W
00D5:  MOVWF  24
00D6:  MOVLW  16
00D7:  MOVWF  25
00D8:  BTFSC  03.0
00D9:  INCF   25,F
....................   packetToSend.distance = 0xFFFF; 
00DA:  MOVLW  FF
00DB:  MOVWF  27
00DC:  MOVWF  26
....................   sendMeasurements(&packetToSend); 
00DD:  CLRF   2A
00DE:  MOVLW  22
00DF:  MOVWF  29
00E0:  GOTO   00E
....................   delay_ms(100); 
00E1:  MOVLW  64
00E2:  MOVWF  29
00E3:  GOTO   08C
....................   count++; 
00E4:  INCF   28,F
00E5:  GOTO   0CC
....................   } 
.................... } 
00E6:  GOTO   0E6

Configuration Fuses:
   Word  1: 0CF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP DEBUG
   Word  2: 3FFF   BORV40 NOWRT

   Some fuses have been forced to be compatible with the ICD debugger.
