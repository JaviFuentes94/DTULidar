CCS PCM C Compiler, Version 5.026, 18875               03-dec-17 20:09

               Filename:   C:\Users\User\Google Drev\DTU Elektro\5. semester\Digital Instrumentering\30021_project\DTULidar\Complete\main.lst

               ROM used:   1586 words (20%)
                           Largest free fragment is 2048
               RAM used:   20 (6%) at main() level
                           59 (17%) worst case
               Stack used: 3 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  05
0002:  MOVWF  0A
0003:  GOTO   5DB
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  05
0009:  RETLW  09
000A:  RETLW  0A
000B:  RETLW  06
*
0102:  MOVLW  8E
0103:  MOVWF  77
0104:  MOVF   43,W
0105:  MOVWF  78
0106:  MOVF   42,W
0107:  MOVWF  79
0108:  CLRF   7A
0109:  MOVF   78,F
010A:  BTFSS  03.2
010B:  GOTO   116
010C:  MOVF   79,W
010D:  MOVWF  78
010E:  CLRF   79
010F:  MOVLW  08
0110:  SUBWF  77,F
0111:  MOVF   78,F
0112:  BTFSS  03.2
0113:  GOTO   116
0114:  CLRF   77
0115:  GOTO   11E
0116:  BCF    03.0
0117:  BTFSC  78.7
0118:  GOTO   11D
0119:  RLF    79,F
011A:  RLF    78,F
011B:  DECF   77,F
011C:  GOTO   116
011D:  BCF    78.7
011E:  RETURN
011F:  MOVF   42,W
0120:  BTFSC  03.2
0121:  GOTO   18F
0122:  MOVWF  4A
0123:  MOVF   46,W
0124:  BTFSC  03.2
0125:  GOTO   18F
0126:  ADDWF  4A,F
0127:  BTFSC  03.0
0128:  GOTO   130
0129:  MOVLW  7F
012A:  SUBWF  4A,F
012B:  BTFSS  03.0
012C:  GOTO   18F
012D:  BTFSC  03.2
012E:  GOTO   18F
012F:  GOTO   134
0130:  MOVLW  81
0131:  ADDWF  4A,F
0132:  BTFSC  03.0
0133:  GOTO   18F
0134:  MOVF   4A,W
0135:  MOVWF  77
0136:  CLRF   78
0137:  CLRF   79
0138:  CLRF   7A
0139:  MOVF   43,W
013A:  MOVWF  4E
013B:  BSF    4E.7
013C:  MOVF   44,W
013D:  MOVWF  4D
013E:  MOVF   45,W
013F:  MOVWF  4C
0140:  MOVLW  18
0141:  MOVWF  4A
0142:  CLRF   4B
0143:  BTFSS  4C.0
0144:  GOTO   15D
0145:  MOVF   49,W
0146:  ADDWF  7A,F
0147:  BTFSS  03.0
0148:  GOTO   14F
0149:  INCF   79,F
014A:  BTFSS  03.2
014B:  GOTO   14F
014C:  INCF   78,F
014D:  BTFSC  03.2
014E:  BSF    4B.7
014F:  MOVF   48,W
0150:  ADDWF  79,F
0151:  BTFSS  03.0
0152:  GOTO   156
0153:  INCF   78,F
0154:  BTFSC  03.2
0155:  BSF    4B.7
0156:  MOVF   47,W
0157:  MOVWF  44
0158:  BSF    44.7
0159:  MOVF   44,W
015A:  ADDWF  78,F
015B:  BTFSC  03.0
015C:  BSF    4B.7
015D:  RLF    4B,F
015E:  RRF    78,F
015F:  RRF    79,F
0160:  RRF    7A,F
0161:  RRF    4E,F
0162:  RRF    4D,F
0163:  RRF    4C,F
0164:  BCF    03.0
0165:  DECFSZ 4A,F
0166:  GOTO   142
0167:  MOVLW  01
0168:  ADDWF  77,F
0169:  BTFSC  03.0
016A:  GOTO   18F
016B:  BTFSC  78.7
016C:  GOTO   174
016D:  RLF    4E,F
016E:  RLF    7A,F
016F:  RLF    79,F
0170:  RLF    78,F
0171:  DECF   77,F
0172:  BTFSC  03.2
0173:  GOTO   18F
0174:  BTFSS  4E.7
0175:  GOTO   185
0176:  INCF   7A,F
0177:  BTFSS  03.2
0178:  GOTO   185
0179:  INCF   79,F
017A:  BTFSS  03.2
017B:  GOTO   185
017C:  INCF   78,F
017D:  BTFSS  03.2
017E:  GOTO   185
017F:  RRF    78,F
0180:  RRF    79,F
0181:  RRF    7A,F
0182:  INCF   77,F
0183:  BTFSC  03.2
0184:  GOTO   18F
0185:  MOVF   43,W
0186:  MOVWF  4B
0187:  MOVF   47,W
0188:  XORWF  4B,F
0189:  BTFSS  4B.7
018A:  GOTO   18D
018B:  BSF    78.7
018C:  GOTO   193
018D:  BCF    78.7
018E:  GOTO   193
018F:  CLRF   77
0190:  CLRF   78
0191:  CLRF   79
0192:  CLRF   7A
0193:  RETURN
0194:  MOVF   46,W
0195:  BTFSC  03.2
0196:  GOTO   259
0197:  MOVWF  52
0198:  MOVF   4A,W
0199:  BTFSC  03.2
019A:  GOTO   259
019B:  SUBWF  52,F
019C:  BTFSS  03.0
019D:  GOTO   1A3
019E:  MOVLW  7F
019F:  ADDWF  52,F
01A0:  BTFSC  03.0
01A1:  GOTO   259
01A2:  GOTO   1A9
01A3:  MOVLW  81
01A4:  SUBWF  52,F
01A5:  BTFSS  03.0
01A6:  GOTO   259
01A7:  BTFSC  03.2
01A8:  GOTO   259
01A9:  MOVF   52,W
01AA:  MOVWF  77
01AB:  CLRF   78
01AC:  CLRF   79
01AD:  CLRF   7A
01AE:  CLRF   51
01AF:  MOVF   47,W
01B0:  MOVWF  50
01B1:  BSF    50.7
01B2:  MOVF   48,W
01B3:  MOVWF  4F
01B4:  MOVF   49,W
01B5:  MOVWF  4E
01B6:  MOVLW  19
01B7:  MOVWF  52
01B8:  MOVF   4D,W
01B9:  SUBWF  4E,F
01BA:  BTFSC  03.0
01BB:  GOTO   1CC
01BC:  MOVLW  01
01BD:  SUBWF  4F,F
01BE:  BTFSC  03.0
01BF:  GOTO   1CC
01C0:  SUBWF  50,F
01C1:  BTFSC  03.0
01C2:  GOTO   1CC
01C3:  SUBWF  51,F
01C4:  BTFSC  03.0
01C5:  GOTO   1CC
01C6:  INCF   51,F
01C7:  INCF   50,F
01C8:  INCF   4F,F
01C9:  MOVF   4D,W
01CA:  ADDWF  4E,F
01CB:  GOTO   1FE
01CC:  MOVF   4C,W
01CD:  SUBWF  4F,F
01CE:  BTFSC  03.0
01CF:  GOTO   1E7
01D0:  MOVLW  01
01D1:  SUBWF  50,F
01D2:  BTFSC  03.0
01D3:  GOTO   1E7
01D4:  SUBWF  51,F
01D5:  BTFSC  03.0
01D6:  GOTO   1E7
01D7:  INCF   51,F
01D8:  INCF   50,F
01D9:  MOVF   4C,W
01DA:  ADDWF  4F,F
01DB:  MOVF   4D,W
01DC:  ADDWF  4E,F
01DD:  BTFSS  03.0
01DE:  GOTO   1FE
01DF:  INCF   4F,F
01E0:  BTFSS  03.2
01E1:  GOTO   1FE
01E2:  INCF   50,F
01E3:  BTFSS  03.2
01E4:  GOTO   1FE
01E5:  INCF   51,F
01E6:  GOTO   1FE
01E7:  MOVF   4B,W
01E8:  IORLW  80
01E9:  SUBWF  50,F
01EA:  BTFSC  03.0
01EB:  GOTO   1FD
01EC:  MOVLW  01
01ED:  SUBWF  51,F
01EE:  BTFSC  03.0
01EF:  GOTO   1FD
01F0:  INCF   51,F
01F1:  MOVF   4B,W
01F2:  IORLW  80
01F3:  ADDWF  50,F
01F4:  MOVF   4C,W
01F5:  ADDWF  4F,F
01F6:  BTFSS  03.0
01F7:  GOTO   1DB
01F8:  INCF   50,F
01F9:  BTFSS  03.2
01FA:  GOTO   1DB
01FB:  INCF   51,F
01FC:  GOTO   1DB
01FD:  BSF    7A.0
01FE:  DECFSZ 52,F
01FF:  GOTO   201
0200:  GOTO   20C
0201:  BCF    03.0
0202:  RLF    4E,F
0203:  RLF    4F,F
0204:  RLF    50,F
0205:  RLF    51,F
0206:  BCF    03.0
0207:  RLF    7A,F
0208:  RLF    79,F
0209:  RLF    78,F
020A:  RLF    53,F
020B:  GOTO   1B8
020C:  BTFSS  53.0
020D:  GOTO   214
020E:  BCF    03.0
020F:  RRF    78,F
0210:  RRF    79,F
0211:  RRF    7A,F
0212:  RRF    53,F
0213:  GOTO   217
0214:  DECF   77,F
0215:  BTFSC  03.2
0216:  GOTO   259
0217:  BTFSC  53.7
0218:  GOTO   240
0219:  BCF    03.0
021A:  RLF    4E,F
021B:  RLF    4F,F
021C:  RLF    50,F
021D:  RLF    51,F
021E:  MOVF   4D,W
021F:  SUBWF  4E,F
0220:  BTFSC  03.0
0221:  GOTO   22C
0222:  MOVLW  01
0223:  SUBWF  4F,F
0224:  BTFSC  03.0
0225:  GOTO   22C
0226:  SUBWF  50,F
0227:  BTFSC  03.0
0228:  GOTO   22C
0229:  SUBWF  51,F
022A:  BTFSS  03.0
022B:  GOTO   24F
022C:  MOVF   4C,W
022D:  SUBWF  4F,F
022E:  BTFSC  03.0
022F:  GOTO   237
0230:  MOVLW  01
0231:  SUBWF  50,F
0232:  BTFSC  03.0
0233:  GOTO   237
0234:  SUBWF  51,F
0235:  BTFSS  03.0
0236:  GOTO   24F
0237:  MOVF   4B,W
0238:  IORLW  80
0239:  SUBWF  50,F
023A:  BTFSC  03.0
023B:  GOTO   240
023C:  MOVLW  01
023D:  SUBWF  51,F
023E:  BTFSS  03.0
023F:  GOTO   24F
0240:  INCF   7A,F
0241:  BTFSS  03.2
0242:  GOTO   24F
0243:  INCF   79,F
0244:  BTFSS  03.2
0245:  GOTO   24F
0246:  INCF   78,F
0247:  BTFSS  03.2
0248:  GOTO   24F
0249:  INCF   77,F
024A:  BTFSC  03.2
024B:  GOTO   259
024C:  RRF    78,F
024D:  RRF    79,F
024E:  RRF    7A,F
024F:  MOVF   47,W
0250:  MOVWF  52
0251:  MOVF   4B,W
0252:  XORWF  52,F
0253:  BTFSS  52.7
0254:  GOTO   257
0255:  BSF    78.7
0256:  GOTO   25D
0257:  BCF    78.7
0258:  GOTO   25D
0259:  CLRF   77
025A:  CLRF   78
025B:  CLRF   79
025C:  CLRF   7A
025D:  RETURN
025E:  MOVLW  80
025F:  BTFSC  03.1
0260:  XORWF  4B,F
0261:  CLRF   50
0262:  CLRF   51
0263:  MOVF   47,W
0264:  MOVWF  4F
0265:  MOVF   4B,W
0266:  XORWF  4F,F
0267:  MOVF   46,W
0268:  BTFSC  03.2
0269:  GOTO   34E
026A:  MOVWF  4E
026B:  MOVWF  77
026C:  MOVF   4A,W
026D:  BTFSC  03.2
026E:  GOTO   357
026F:  SUBWF  4E,F
0270:  BTFSC  03.2
0271:  GOTO   2F3
0272:  BTFSS  03.0
0273:  GOTO   2B1
0274:  MOVF   4B,W
0275:  MOVWF  54
0276:  BSF    54.7
0277:  MOVF   4C,W
0278:  MOVWF  53
0279:  MOVF   4D,W
027A:  MOVWF  52
027B:  CLRF   51
027C:  BCF    03.0
027D:  RRF    54,F
027E:  RRF    53,F
027F:  RRF    52,F
0280:  RRF    51,F
0281:  DECFSZ 4E,F
0282:  GOTO   27B
0283:  BTFSS  4F.7
0284:  GOTO   288
0285:  BSF    50.0
0286:  GOTO   36B
0287:  BCF    50.0
0288:  BCF    4E.0
0289:  BSF    50.4
028A:  MOVLW  49
028B:  MOVWF  04
028C:  BCF    03.7
028D:  GOTO   380
028E:  BCF    50.4
028F:  BTFSC  4F.7
0290:  GOTO   29B
0291:  BTFSS  4E.0
0292:  GOTO   2A6
0293:  RRF    54,F
0294:  RRF    53,F
0295:  RRF    52,F
0296:  RRF    51,F
0297:  INCF   77,F
0298:  BTFSC  03.2
0299:  GOTO   366
029A:  GOTO   2A6
029B:  BTFSC  54.7
029C:  GOTO   2A9
029D:  BCF    03.0
029E:  RLF    51,F
029F:  RLF    52,F
02A0:  RLF    53,F
02A1:  RLF    54,F
02A2:  DECF   77,F
02A3:  BTFSC  03.2
02A4:  GOTO   366
02A5:  GOTO   29B
02A6:  BSF    50.6
02A7:  GOTO   313
02A8:  BCF    50.6
02A9:  MOVF   47,W
02AA:  MOVWF  4F
02AB:  BTFSS  4F.7
02AC:  GOTO   2AF
02AD:  BSF    54.7
02AE:  GOTO   35F
02AF:  BCF    54.7
02B0:  GOTO   35F
02B1:  MOVF   4A,W
02B2:  MOVWF  4E
02B3:  MOVWF  77
02B4:  MOVF   46,W
02B5:  SUBWF  4E,F
02B6:  MOVF   47,W
02B7:  MOVWF  54
02B8:  BSF    54.7
02B9:  MOVF   48,W
02BA:  MOVWF  53
02BB:  MOVF   49,W
02BC:  MOVWF  52
02BD:  CLRF   51
02BE:  BCF    03.0
02BF:  RRF    54,F
02C0:  RRF    53,F
02C1:  RRF    52,F
02C2:  RRF    51,F
02C3:  DECFSZ 4E,F
02C4:  GOTO   2BD
02C5:  BTFSS  4F.7
02C6:  GOTO   2CA
02C7:  BSF    50.1
02C8:  GOTO   36B
02C9:  BCF    50.1
02CA:  BCF    4E.0
02CB:  BSF    50.5
02CC:  MOVLW  4D
02CD:  MOVWF  04
02CE:  BCF    03.7
02CF:  GOTO   380
02D0:  BCF    50.5
02D1:  BTFSC  4F.7
02D2:  GOTO   2DD
02D3:  BTFSS  4E.0
02D4:  GOTO   2E8
02D5:  RRF    54,F
02D6:  RRF    53,F
02D7:  RRF    52,F
02D8:  RRF    51,F
02D9:  INCF   77,F
02DA:  BTFSC  03.2
02DB:  GOTO   366
02DC:  GOTO   2E8
02DD:  BTFSC  54.7
02DE:  GOTO   2EB
02DF:  BCF    03.0
02E0:  RLF    51,F
02E1:  RLF    52,F
02E2:  RLF    53,F
02E3:  RLF    54,F
02E4:  DECF   77,F
02E5:  BTFSC  03.2
02E6:  GOTO   366
02E7:  GOTO   2DD
02E8:  BSF    50.7
02E9:  GOTO   313
02EA:  BCF    50.7
02EB:  MOVF   4B,W
02EC:  MOVWF  4F
02ED:  BTFSS  4F.7
02EE:  GOTO   2F1
02EF:  BSF    54.7
02F0:  GOTO   35F
02F1:  BCF    54.7
02F2:  GOTO   35F
02F3:  MOVF   4B,W
02F4:  MOVWF  54
02F5:  BSF    54.7
02F6:  MOVF   4C,W
02F7:  MOVWF  53
02F8:  MOVF   4D,W
02F9:  MOVWF  52
02FA:  BTFSS  4F.7
02FB:  GOTO   300
02FC:  BCF    54.7
02FD:  BSF    50.2
02FE:  GOTO   36B
02FF:  BCF    50.2
0300:  CLRF   51
0301:  BCF    4E.0
0302:  MOVLW  49
0303:  MOVWF  04
0304:  BCF    03.7
0305:  GOTO   380
0306:  BTFSC  4F.7
0307:  GOTO   329
0308:  MOVF   47,W
0309:  MOVWF  4F
030A:  BTFSS  4E.0
030B:  GOTO   313
030C:  RRF    54,F
030D:  RRF    53,F
030E:  RRF    52,F
030F:  RRF    51,F
0310:  INCF   77,F
0311:  BTFSC  03.2
0312:  GOTO   366
0313:  BTFSS  51.7
0314:  GOTO   324
0315:  INCF   52,F
0316:  BTFSS  03.2
0317:  GOTO   324
0318:  INCF   53,F
0319:  BTFSS  03.2
031A:  GOTO   324
031B:  INCF   54,F
031C:  BTFSS  03.2
031D:  GOTO   324
031E:  RRF    54,F
031F:  RRF    53,F
0320:  RRF    52,F
0321:  INCF   77,F
0322:  BTFSC  03.2
0323:  GOTO   366
0324:  BTFSC  50.6
0325:  GOTO   2A8
0326:  BTFSC  50.7
0327:  GOTO   2EA
0328:  GOTO   348
0329:  MOVLW  80
032A:  XORWF  54,F
032B:  BTFSS  54.7
032C:  GOTO   331
032D:  GOTO   36B
032E:  MOVF   4B,W
032F:  MOVWF  4F
0330:  GOTO   33E
0331:  MOVF   47,W
0332:  MOVWF  4F
0333:  MOVF   54,F
0334:  BTFSS  03.2
0335:  GOTO   33E
0336:  MOVF   53,F
0337:  BTFSS  03.2
0338:  GOTO   33E
0339:  MOVF   52,F
033A:  BTFSS  03.2
033B:  GOTO   33E
033C:  CLRF   77
033D:  GOTO   35F
033E:  BTFSC  54.7
033F:  GOTO   348
0340:  BCF    03.0
0341:  RLF    51,F
0342:  RLF    52,F
0343:  RLF    53,F
0344:  RLF    54,F
0345:  DECFSZ 77,F
0346:  GOTO   33E
0347:  GOTO   366
0348:  BTFSS  4F.7
0349:  GOTO   34C
034A:  BSF    54.7
034B:  GOTO   35F
034C:  BCF    54.7
034D:  GOTO   35F
034E:  MOVF   4A,W
034F:  MOVWF  77
0350:  MOVF   4B,W
0351:  MOVWF  54
0352:  MOVF   4C,W
0353:  MOVWF  53
0354:  MOVF   4D,W
0355:  MOVWF  52
0356:  GOTO   35F
0357:  MOVF   46,W
0358:  MOVWF  77
0359:  MOVF   47,W
035A:  MOVWF  54
035B:  MOVF   48,W
035C:  MOVWF  53
035D:  MOVF   49,W
035E:  MOVWF  52
035F:  MOVF   54,W
0360:  MOVWF  78
0361:  MOVF   53,W
0362:  MOVWF  79
0363:  MOVF   52,W
0364:  MOVWF  7A
0365:  GOTO   39E
0366:  CLRF   77
0367:  CLRF   78
0368:  CLRF   79
0369:  CLRF   7A
036A:  GOTO   39E
036B:  CLRF   51
036C:  COMF   52,F
036D:  COMF   53,F
036E:  COMF   54,F
036F:  COMF   51,F
0370:  INCF   51,F
0371:  BTFSS  03.2
0372:  GOTO   379
0373:  INCF   52,F
0374:  BTFSS  03.2
0375:  GOTO   379
0376:  INCF   53,F
0377:  BTFSC  03.2
0378:  INCF   54,F
0379:  BTFSC  50.0
037A:  GOTO   287
037B:  BTFSC  50.1
037C:  GOTO   2C9
037D:  BTFSC  50.2
037E:  GOTO   2FF
037F:  GOTO   32E
0380:  MOVF   00,W
0381:  ADDWF  52,F
0382:  BTFSS  03.0
0383:  GOTO   38A
0384:  INCF   53,F
0385:  BTFSS  03.2
0386:  GOTO   38A
0387:  INCF   54,F
0388:  BTFSC  03.2
0389:  BSF    4E.0
038A:  DECF   04,F
038B:  MOVF   00,W
038C:  ADDWF  53,F
038D:  BTFSS  03.0
038E:  GOTO   392
038F:  INCF   54,F
0390:  BTFSC  03.2
0391:  BSF    4E.0
0392:  DECF   04,F
0393:  MOVF   00,W
0394:  BTFSS  00.7
0395:  XORLW  80
0396:  ADDWF  54,F
0397:  BTFSC  03.0
0398:  BSF    4E.0
0399:  BTFSC  50.4
039A:  GOTO   28E
039B:  BTFSC  50.5
039C:  GOTO   2D0
039D:  GOTO   306
039E:  RETURN
039F:  MOVLW  8E
03A0:  MOVWF  77
03A1:  MOVF   37,W
03A2:  SUBWF  77,F
03A3:  MOVF   38,W
03A4:  MOVWF  79
03A5:  MOVF   39,W
03A6:  MOVWF  78
03A7:  BSF    79.7
03A8:  MOVF   77,F
03A9:  BTFSC  03.2
03AA:  GOTO   3B6
03AB:  BCF    03.0
03AC:  MOVF   79,F
03AD:  BTFSS  03.2
03AE:  GOTO   3B2
03AF:  MOVF   78,F
03B0:  BTFSC  03.2
03B1:  GOTO   3B6
03B2:  RRF    79,F
03B3:  RRF    78,F
03B4:  DECFSZ 77,F
03B5:  GOTO   3AB
03B6:  BTFSS  38.7
03B7:  GOTO   3BD
03B8:  COMF   78,F
03B9:  COMF   79,F
03BA:  INCF   78,F
03BB:  BTFSC  03.2
03BC:  INCF   79,F
03BD:  RETURN
*
0549:  MOVF   38,W
054A:  MOVWF  3F
054B:  MOVF   3C,W
054C:  XORWF  3F,F
054D:  BTFSS  3F.7
054E:  GOTO   554
054F:  BCF    03.2
0550:  BCF    03.0
0551:  BTFSC  38.7
0552:  BSF    03.0
0553:  GOTO   587
0554:  MOVF   38,W
0555:  MOVWF  3F
0556:  MOVF   3B,W
0557:  MOVWF  40
0558:  MOVF   37,W
0559:  SUBWF  40,F
055A:  BTFSC  03.2
055B:  GOTO   562
055C:  BTFSS  3F.7
055D:  GOTO   587
055E:  MOVF   03,W
055F:  XORLW  01
0560:  MOVWF  03
0561:  GOTO   587
0562:  MOVF   3C,W
0563:  MOVWF  40
0564:  MOVF   38,W
0565:  SUBWF  40,F
0566:  BTFSC  03.2
0567:  GOTO   56E
0568:  BTFSS  3F.7
0569:  GOTO   587
056A:  MOVF   03,W
056B:  XORLW  01
056C:  MOVWF  03
056D:  GOTO   587
056E:  MOVF   3D,W
056F:  MOVWF  40
0570:  MOVF   39,W
0571:  SUBWF  40,F
0572:  BTFSC  03.2
0573:  GOTO   57A
0574:  BTFSS  3F.7
0575:  GOTO   587
0576:  MOVF   03,W
0577:  XORLW  01
0578:  MOVWF  03
0579:  GOTO   587
057A:  MOVF   3E,W
057B:  MOVWF  40
057C:  MOVF   3A,W
057D:  SUBWF  40,F
057E:  BTFSC  03.2
057F:  GOTO   586
0580:  BTFSS  3F.7
0581:  GOTO   587
0582:  MOVF   03,W
0583:  XORLW  01
0584:  MOVWF  03
0585:  GOTO   587
0586:  BCF    03.0
....................  
.................... #list 
....................  
.................... #device ICD=true 
.................... #device ADC=10 
....................   
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................   
.................... #use delay(internal=8000000,clock_out) 
*
00C8:  MOVLW  2F
00C9:  MOVWF  04
00CA:  BCF    03.7
00CB:  MOVF   00,W
00CC:  BTFSC  03.2
00CD:  GOTO   0DB
00CE:  MOVLW  02
00CF:  MOVWF  78
00D0:  CLRF   77
00D1:  DECFSZ 77,F
00D2:  GOTO   0D1
00D3:  DECFSZ 78,F
00D4:  GOTO   0D0
00D5:  MOVLW  97
00D6:  MOVWF  77
00D7:  DECFSZ 77,F
00D8:  GOTO   0D7
00D9:  DECFSZ 00,F
00DA:  GOTO   0CE
00DB:  BCF    0A.3
00DC:  BCF    0A.4
00DD:  GOTO   622 (RETURN)
....................   
.................... #use rs232( baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, ERRORS) 
....................   
.................... //#use RS232 (DEBUGGER) 
....................   
.................... //#use  I2C(master, sda=PIN_C4, scl= PIN_C3) 
....................  
....................  
.................... #include "lib/stepperControl.c" 
.................... #include "stepperControl.h" 
.................... #ifndef stepperControl 
.................... #define stepperControl 
....................  
.................... /*Defines*/ 
.................... #define BOTTOM_MOTOR 0  
.................... #define TOP_MOTOR 1 
.................... #define BOTTOM_MOTOR_LIMIT 20 
.................... #define TOP_MOTOR_LIMIT 30 
.................... #BYTE portc = 7      // Port used to control motor 
.................... #BYTE portd = 8      // PIC16F887 datasheet page 25 
....................  
.................... /* Globals */ 
.................... BYTE const POSITIONS[4] = { 0b0101, 0b1001, 0b1010, 0b0110 }; 
.................... unsigned int8 iCurrentState[2] = { 0 }; /* This variable keeps track of the current state */ 
*
060A:  BCF    03.6
060B:  CLRF   21
060C:  CLRF   22
.................... unsigned int32 iDelay = 5000; // delay default 5ms 
.................... signed int8 iGlobalPosition[2] = { 0 }; 
060D:  CLRF   27
060E:  CLRF   28
.................... int1  bSequenceOver = FALSE; 
.................... int1  bGlobalGoRight = FALSE; 
....................  
.................... /* Function declarations */ 
.................... void initStepper(void); 
.................... void stepperRotateSingleRight(int motor); 
.................... void stepperRotateSingleLeft(int motor); 
.................... int16 moveMeasure(int measureTime_ms, int rotation); 
.................... void stepperRotate180right(int timeDelay_us, int motor); 
.................... void stepperRotate180left(int timeDelay_us, int motor); 
.................... void stepperMotorSequenceTop(void); 
.................... void stepperMotorSequence(signed int8 * angleX, signed int8 * angleZ); 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... void initStepper() 
.................... { 
....................    set_tris_c(0xF0); 
*
000C:  MOVLW  F0
000D:  BSF    03.5
000E:  MOVWF  07
000F:  BCF    03.5
0010:  MOVWF  2A
....................    set_tris_d(0xF0); 
0011:  BSF    03.5
0012:  MOVWF  08
0013:  BCF    03.5
0014:  BCF    0A.3
0015:  BCF    0A.4
0016:  GOTO   617 (RETURN)
.................... } 
....................  
.................... void stepperMotorSequenceTop() 
.................... { 
....................    stepperRotateSingleRight(TOP_MOTOR); 
*
0060:  MOVLW  01
0061:  MOVWF  33
0062:  CALL   037
....................    iGlobalPosition[TOP_MOTOR]++; 
0063:  INCF   28,F
....................    bGlobalGoRight = !bGlobalGoRight; 
0064:  MOVLW  02
0065:  XORWF  29,F
....................  
....................    if(iGlobalPosition[TOP_MOTOR] == TOP_MOTOR_LIMIT) 
0066:  MOVF   28,W
0067:  SUBLW  1E
0068:  BTFSC  03.2
....................    { 
....................       bSequenceOver = True; 
0069:  BSF    29.0
....................    } 
006A:  RETURN
.................... } 
....................  
.................... void stepperMotorSequence(signed int8 * angleX, signed int8 * angleZ) 
.................... { 
....................    if(bSequenceOver) 
006B:  BTFSC  29.0
....................    { 
....................       return; 
006C:  GOTO   0C5
....................    } 
....................  
....................    if(bGlobalGoRight == TRUE) 
006D:  BTFSS  29.1
006E:  GOTO   079
....................    { 
....................       if(iGlobalPosition[BOTTOM_MOTOR] == BOTTOM_MOTOR_LIMIT) 
006F:  MOVF   27,W
0070:  SUBLW  14
0071:  BTFSS  03.2
0072:  GOTO   075
....................       { 
....................          stepperMotorSequenceTop(); 
0073:  CALL   060
....................       } 
0074:  GOTO   078
....................       else 
....................       { 
....................          stepperRotateSingleRight(BOTTOM_MOTOR);       
0075:  CLRF   33
0076:  CALL   037
....................          iGlobalPosition[BOTTOM_MOTOR]++;          
0077:  INCF   27,F
....................       } 
....................    } 
0078:  GOTO   0B7
....................    else 
....................    { 
....................       if(iGlobalPosition[BOTTOM_MOTOR] == (-1*BOTTOM_MOTOR_LIMIT)) 
0079:  MOVF   27,W
007A:  SUBLW  EC
007B:  BTFSS  03.2
007C:  GOTO   07F
....................       { 
....................          stepperMotorSequenceTop(); 
007D:  CALL   060
....................       } 
007E:  GOTO   0B7
....................       else 
....................       { 
....................          stepperRotateSingleLeft(BOTTOM_MOTOR);       
007F:  CLRF   33
....................          iGlobalPosition[BOTTOM_MOTOR]--;                
*
00B6:  DECF   27,F
....................       } 
....................    } 
....................     
....................    *angleZ = iGlobalPosition[BOTTOM_MOTOR]; 
00B7:  MOVF   31,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  BTFSC  32.0
00BB:  BSF    03.7
00BC:  MOVF   27,W
00BD:  MOVWF  00
....................    *angleX = iGlobalPosition[TOP_MOTOR]; 
00BE:  MOVF   2F,W
00BF:  MOVWF  04
00C0:  BCF    03.7
00C1:  BTFSC  30.0
00C2:  BSF    03.7
00C3:  MOVF   28,W
00C4:  MOVWF  00
00C5:  BCF    0A.3
00C6:  BCF    0A.4
00C7:  GOTO   61F (RETURN)
.................... } 
....................  
.................... void stepperRotateSingleRight(int1 motor) 
.................... { 
....................    iCurrentState[motor] = ((iCurrentState[motor]+1)&3); 
*
0037:  MOVLW  21
0038:  ADDWF  33,W
0039:  MOVWF  78
003A:  CLRF   7A
003B:  BTFSC  03.0
003C:  INCF   7A,F
003D:  MOVLW  21
003E:  ADDWF  33,W
003F:  MOVWF  04
0040:  BCF    03.7
0041:  MOVLW  01
0042:  ADDWF  00,W
0043:  ANDLW  03
0044:  MOVWF  36
0045:  MOVF   78,W
0046:  MOVWF  04
0047:  BCF    03.7
0048:  BTFSC  7A.0
0049:  BSF    03.7
004A:  MOVF   36,W
004B:  MOVWF  00
....................       
....................      /* Set outputs to move the motor */ 
....................    if(motor == 1) 
004C:  DECFSZ 33,W
004D:  GOTO   057
....................    { 
....................       portc = POSITIONS[iCurrentState[motor]]; 
004E:  MOVLW  21
004F:  ADDWF  33,W
0050:  MOVWF  04
0051:  BCF    03.7
0052:  MOVF   00,W
0053:  CALL   004
0054:  MOVWF  78
0055:  MOVWF  07
....................    } 
0056:  GOTO   05F
....................    else 
....................    { 
....................       portd = POSITIONS[iCurrentState[motor]]; 
0057:  MOVLW  21
0058:  ADDWF  33,W
0059:  MOVWF  04
005A:  BCF    03.7
005B:  MOVF   00,W
005C:  CALL   004
005D:  MOVWF  78
005E:  MOVWF  08
....................    }         
005F:  RETURN
.................... } 
....................  
.................... void stepperRotateSingleLeft(int1 motor) 
.................... { 
....................    if(iCurrentState[motor] == 0) 
*
0080:  MOVLW  21
0081:  ADDWF  33,W
0082:  MOVWF  04
0083:  BCF    03.7
0084:  MOVF   00,F
0085:  BTFSS  03.2
0086:  GOTO   08E
....................    { 
....................       iCurrentState[motor] = 3; 
0087:  MOVLW  21
0088:  ADDWF  33,W
0089:  MOVWF  04
008A:  BCF    03.7
008B:  MOVLW  03
008C:  MOVWF  00
....................    } 
008D:  GOTO   0A3
....................    else 
....................    { 
....................       iCurrentState[motor] = ((iCurrentState[motor]-1)&3); 
008E:  MOVLW  21
008F:  ADDWF  33,W
0090:  MOVWF  78
0091:  CLRF   7A
0092:  BTFSC  03.0
0093:  INCF   7A,F
0094:  MOVLW  21
0095:  ADDWF  33,W
0096:  MOVWF  04
0097:  BCF    03.7
0098:  MOVLW  01
0099:  SUBWF  00,W
009A:  ANDLW  03
009B:  MOVWF  36
009C:  MOVF   78,W
009D:  MOVWF  04
009E:  BCF    03.7
009F:  BTFSC  7A.0
00A0:  BSF    03.7
00A1:  MOVF   36,W
00A2:  MOVWF  00
....................    } 
....................    if(motor == 1) 
00A3:  DECFSZ 33,W
00A4:  GOTO   0AE
....................    { 
....................       portc = POSITIONS[iCurrentState[motor]]; 
00A5:  MOVLW  21
00A6:  ADDWF  33,W
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  MOVF   00,W
00AA:  CALL   004
00AB:  MOVWF  78
00AC:  MOVWF  07
....................    } 
00AD:  GOTO   0B6
....................    else 
....................    { 
....................       portd = POSITIONS[iCurrentState[motor]]; 
00AE:  MOVLW  21
00AF:  ADDWF  33,W
00B0:  MOVWF  04
00B1:  BCF    03.7
00B2:  MOVF   00,W
00B3:  CALL   004
00B4:  MOVWF  78
00B5:  MOVWF  08
....................    } 
....................  
.................... }    
....................  
.................... #include "lib/sensorControl.c" 
.................... #include "sensorControl.h" 
.................... #ifndef sensorControl 
.................... #define sensorControl 
....................  
.................... /*Defines*/ 
.................... #define CHANNEL_LONG_RANGE  4 
.................... #define CHANNEL_SHORT_RANGE 6 
....................  
.................... /*Function declarations*/ 
.................... void initSensors(void); 
.................... unsigned int16 readInternalAdc(unsigned int8 channel); 
.................... float readLongRangeSensor(); 
.................... float readShortRangeSensor(); 
.................... int16 readRangeSensor(); 
....................  
.................... #endif 
....................  
....................  
.................... void initSensors() 
.................... { 
....................   /* Setup the  ADC to 2.5V */ 
....................   //setup_vref(VREF_LOW | 0x0C); 
....................   setup_vref(0xEC); 
*
0017:  MOVLW  EC
0018:  BSF    03.5
0019:  MOVWF  17
....................   setup_adc(ADC_CLOCK_DIV_32); 
001A:  BCF    03.5
001B:  BCF    1F.6
001C:  BSF    1F.7
001D:  BSF    03.5
001E:  BSF    1F.7
001F:  BCF    03.5
0020:  BSF    1F.0
....................   setup_adc_ports (sAN4 | sAN6 | VSS_VREF); 
0021:  BSF    03.5
0022:  BSF    03.6
0023:  MOVF   09,W
0024:  ANDLW  C0
0025:  MOVWF  09
0026:  BCF    03.6
0027:  BSF    1F.4
0028:  BCF    1F.5
0029:  MOVLW  50
002A:  BSF    03.6
002B:  MOVWF  08
....................     
....................   /* Initially start with channel 6 */ 
....................   set_adc_channel(6); 
002C:  MOVLW  18
002D:  MOVWF  78
002E:  BCF    03.5
002F:  BCF    03.6
0030:  MOVF   1F,W
0031:  ANDLW  C3
0032:  IORWF  78,W
0033:  MOVWF  1F
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   618 (RETURN)
.................... } 
....................  
.................... int16 readRangeSensor() 
*
0474:  MOVF   7A,W
0475:  MOVWF  32
0476:  MOVF   79,W
0477:  MOVWF  31
0478:  MOVF   78,W
0479:  MOVWF  30
047A:  MOVF   77,W
047B:  MOVWF  2F
*
0533:  MOVF   7A,W
0534:  MOVWF  36
0535:  MOVF   79,W
0536:  MOVWF  35
0537:  MOVF   78,W
0538:  MOVWF  34
0539:  MOVF   77,W
053A:  MOVWF  33
.................... { 
....................    float fShortMeasRange = readShortRangeSensor(); 
....................    float fLongMeasRange = readLongRangeSensor(); 
....................     
....................    if(fShortMeasRange == 150) 
053B:  MOVF   32,W
053C:  MOVWF  3A
053D:  MOVF   31,W
053E:  MOVWF  39
053F:  MOVF   30,W
0540:  MOVWF  38
0541:  MOVF   2F,W
0542:  MOVWF  37
0543:  CLRF   3E
0544:  CLRF   3D
0545:  MOVLW  16
0546:  MOVWF  3C
0547:  MOVLW  86
0548:  MOVWF  3B
*
0587:  BTFSS  03.2
0588:  GOTO   595
....................    { 
....................       return ((int16)fLongMeasRange); 
0589:  MOVF   36,W
058A:  MOVWF  3A
058B:  MOVF   35,W
058C:  MOVWF  39
058D:  MOVF   34,W
058E:  MOVWF  38
058F:  MOVF   33,W
0590:  MOVWF  37
0591:  CALL   39F
0592:  MOVF   79,W
0593:  GOTO   59F
....................    } 
0594:  GOTO   59F
....................    else 
....................    { 
....................       return ((int16)fShortMeasRange); 
0595:  MOVF   32,W
0596:  MOVWF  3A
0597:  MOVF   31,W
0598:  MOVWF  39
0599:  MOVF   30,W
059A:  MOVWF  38
059B:  MOVF   2F,W
059C:  MOVWF  37
059D:  CALL   39F
059E:  MOVF   79,W
....................    } 
059F:  BCF    0A.3
05A0:  BCF    0A.4
05A1:  GOTO   623 (RETURN)
.................... } 
....................  
.................... unsigned int16 readInternalAdc(unsigned int8 channel) 
.................... { 
....................   set_adc_channel(channel); 
*
00DE:  RLF    42,W
00DF:  MOVWF  77
00E0:  RLF    77,F
00E1:  MOVLW  FC
00E2:  ANDWF  77,F
00E3:  MOVF   1F,W
00E4:  ANDLW  C3
00E5:  IORWF  77,W
00E6:  MOVWF  1F
....................   delay_us(20); 
00E7:  MOVLW  0C
00E8:  MOVWF  77
00E9:  DECFSZ 77,F
00EA:  GOTO   0E9
00EB:  GOTO   0EC
00EC:  NOP
....................  
....................   read_adc(ADC_START_ONLY); // start the ADC for conversion 
00ED:  BSF    1F.1
....................    
....................   int1 done = adc_done();   // Poll on ADC result 
00EE:  BCF    43.0
00EF:  BTFSS  1F.1
00F0:  BSF    43.0
....................   while(!done)  
00F1:  BTFSC  43.0
00F2:  GOTO   0F7
....................   { 
....................     // wait until measurement is ready 
....................     done = adc_done(); 
00F3:  BCF    43.0
00F4:  BTFSS  1F.1
00F5:  BSF    43.0
00F6:  GOTO   0F1
....................   } 
....................    
....................   // read conversion result 
....................   return((int16)read_adc(ADC_READ_ONLY)); 
00F7:  BTFSC  1F.1
00F8:  GOTO   0F7
00F9:  MOVF   1E,W
00FA:  MOVWF  7A
00FB:  BSF    03.5
00FC:  MOVF   1E,W
00FD:  MOVWF  78
00FE:  MOVF   7A,W
00FF:  MOVWF  79
0100:  BCF    03.5
0101:  RETURN
.................... } 
....................  
.................... float readLongRangeSensor() 
*
047C:  CLRF   40
047D:  CLRF   3F
047E:  CLRF   3E
047F:  CLRF   3D
.................... { 
....................   unsigned int16 iSensorRead; 
....................   float fSensorRead; 
....................   float fCumulativeMeasurement = 0.0f; 
....................    
....................   for(int i = 0; i <10; i++) 
0480:  CLRF   41
0481:  MOVF   41,W
0482:  SUBLW  09
0483:  BTFSS  03.0
0484:  GOTO   524
....................   { 
....................      iSensorRead = readInternalAdc(CHANNEL_LONG_RANGE); 
0485:  MOVLW  04
0486:  MOVWF  42
0487:  CALL   0DE
0488:  MOVF   79,W
0489:  MOVWF  38
048A:  MOVF   78,W
048B:  MOVWF  37
....................    
....................      if(iSensorRead >= 940) 
048C:  MOVF   38,W
048D:  SUBLW  02
048E:  BTFSC  03.0
048F:  GOTO   49C
0490:  XORLW  FF
0491:  BTFSS  03.2
0492:  GOTO   497
0493:  MOVF   37,W
0494:  SUBLW  AB
0495:  BTFSC  03.0
0496:  GOTO   49C
....................      { 
....................       fSensorRead = 0; 
0497:  CLRF   3C
0498:  CLRF   3B
0499:  CLRF   3A
049A:  CLRF   39
....................       } 
049B:  GOTO   508
....................       else 
....................      { 
....................          if(iSensorRead <= 630 ) 
049C:  MOVF   38,W
049D:  SUBLW  02
049E:  BTFSS  03.0
049F:  GOTO   4AD
04A0:  BTFSS  03.2
04A1:  GOTO   4A6
04A2:  MOVF   37,W
04A3:  SUBLW  76
04A4:  BTFSS  03.0
04A5:  GOTO   4AD
....................          { 
....................             fSensorRead = 500; 
04A6:  CLRF   3C
04A7:  CLRF   3B
04A8:  MOVLW  7A
04A9:  MOVWF  3A
04AA:  MOVLW  87
04AB:  MOVWF  39
....................          } 
04AC:  GOTO   508
....................          else 
....................          { 
....................          fSensorRead = 122f / (( 2.5f * ((float) iSensorRead) ) / 1024f - 1.28f); 
04AD:  MOVF   38,W
04AE:  MOVWF  43
04AF:  MOVF   37,W
04B0:  MOVWF  42
04B1:  CALL   102
04B2:  CLRF   45
04B3:  CLRF   44
04B4:  MOVLW  20
04B5:  MOVWF  43
04B6:  MOVLW  80
04B7:  MOVWF  42
04B8:  MOVF   7A,W
04B9:  MOVWF  49
04BA:  MOVF   79,W
04BB:  MOVWF  48
04BC:  MOVF   78,W
04BD:  MOVWF  47
04BE:  MOVF   77,W
04BF:  MOVWF  46
04C0:  CALL   11F
04C1:  MOVF   7A,W
04C2:  MOVWF  45
04C3:  MOVF   79,W
04C4:  MOVWF  44
04C5:  MOVF   78,W
04C6:  MOVWF  43
04C7:  MOVF   77,W
04C8:  MOVWF  42
04C9:  MOVF   7A,W
04CA:  MOVWF  49
04CB:  MOVF   79,W
04CC:  MOVWF  48
04CD:  MOVF   78,W
04CE:  MOVWF  47
04CF:  MOVF   77,W
04D0:  MOVWF  46
04D1:  CLRF   4D
04D2:  CLRF   4C
04D3:  CLRF   4B
04D4:  MOVLW  89
04D5:  MOVWF  4A
04D6:  CALL   194
04D7:  MOVF   7A,W
04D8:  MOVWF  45
04D9:  MOVF   79,W
04DA:  MOVWF  44
04DB:  MOVF   78,W
04DC:  MOVWF  43
04DD:  MOVF   77,W
04DE:  MOVWF  42
04DF:  BSF    03.1
04E0:  MOVF   7A,W
04E1:  MOVWF  49
04E2:  MOVF   79,W
04E3:  MOVWF  48
04E4:  MOVF   78,W
04E5:  MOVWF  47
04E6:  MOVF   77,W
04E7:  MOVWF  46
04E8:  MOVLW  0A
04E9:  MOVWF  4D
04EA:  MOVLW  D7
04EB:  MOVWF  4C
04EC:  MOVLW  23
04ED:  MOVWF  4B
04EE:  MOVLW  7F
04EF:  MOVWF  4A
04F0:  CALL   25E
04F1:  CLRF   49
04F2:  CLRF   48
04F3:  MOVLW  74
04F4:  MOVWF  47
04F5:  MOVLW  85
04F6:  MOVWF  46
04F7:  MOVF   7A,W
04F8:  MOVWF  4D
04F9:  MOVF   79,W
04FA:  MOVWF  4C
04FB:  MOVF   78,W
04FC:  MOVWF  4B
04FD:  MOVF   77,W
04FE:  MOVWF  4A
04FF:  CALL   194
0500:  MOVF   7A,W
0501:  MOVWF  3C
0502:  MOVF   79,W
0503:  MOVWF  3B
0504:  MOVF   78,W
0505:  MOVWF  3A
0506:  MOVF   77,W
0507:  MOVWF  39
....................    //      printf("iSensorRead: %Lu \t in volt: %f \t\t", iSensorRead, (iSensorRead * 2.5f) / 1024f ); 
....................        } 
....................      } 
....................       
....................      fCumulativeMeasurement += fSensorRead;  
0508:  BCF    03.1
0509:  MOVF   40,W
050A:  MOVWF  49
050B:  MOVF   3F,W
050C:  MOVWF  48
050D:  MOVF   3E,W
050E:  MOVWF  47
050F:  MOVF   3D,W
0510:  MOVWF  46
0511:  MOVF   3C,W
0512:  MOVWF  4D
0513:  MOVF   3B,W
0514:  MOVWF  4C
0515:  MOVF   3A,W
0516:  MOVWF  4B
0517:  MOVF   39,W
0518:  MOVWF  4A
0519:  CALL   25E
051A:  MOVF   7A,W
051B:  MOVWF  40
051C:  MOVF   79,W
051D:  MOVWF  3F
051E:  MOVF   78,W
051F:  MOVWF  3E
0520:  MOVF   77,W
0521:  MOVWF  3D
0522:  INCF   41,F
0523:  GOTO   481
....................    } 
....................    
....................    return (fCumulativeMeasurement/10.0f); 
0524:  MOVF   40,W
0525:  MOVWF  49
0526:  MOVF   3F,W
0527:  MOVWF  48
0528:  MOVF   3E,W
0529:  MOVWF  47
052A:  MOVF   3D,W
052B:  MOVWF  46
052C:  CLRF   4D
052D:  CLRF   4C
052E:  MOVLW  20
052F:  MOVWF  4B
0530:  MOVLW  82
0531:  MOVWF  4A
0532:  CALL   194
.................... } 
....................  
.................... float readShortRangeSensor() 
*
03BE:  CLRF   40
03BF:  CLRF   3F
03C0:  CLRF   3E
03C1:  CLRF   3D
.................... { 
....................   unsigned int16 iSensorRead; 
....................   float fSensorRead; 
....................   float fCumulativeMeasurement = 0; 
....................    
....................   for(int i = 0; i<10; i++) 
03C2:  CLRF   41
03C3:  MOVF   41,W
03C4:  SUBLW  09
03C5:  BTFSS  03.0
03C6:  GOTO   465
....................   { 
....................    iSensorRead = readInternalAdc(CHANNEL_SHORT_RANGE); 
03C7:  MOVLW  06
03C8:  MOVWF  42
03C9:  CALL   0DE
03CA:  MOVF   79,W
03CB:  MOVWF  38
03CC:  MOVF   78,W
03CD:  MOVWF  37
....................    // measurement below 30cm 
....................    if(iSensorRead >= 724 ) 
03CE:  MOVF   38,W
03CF:  SUBLW  01
03D0:  BTFSC  03.0
03D1:  GOTO   3E0
03D2:  XORLW  FF
03D3:  BTFSS  03.2
03D4:  GOTO   3D9
03D5:  MOVF   37,W
03D6:  SUBLW  D3
03D7:  BTFSC  03.0
03D8:  GOTO   3E0
....................    { 
....................       fSensorRead = 30; 
03D9:  CLRF   3C
03DA:  CLRF   3B
03DB:  MOVLW  70
03DC:  MOVWF  3A
03DD:  MOVLW  83
03DE:  MOVWF  39
....................    } 
03DF:  GOTO   449
....................    else  
....................    { 
....................       // measurement above 150 
....................       if( iSensorRead <= 204 ) 
03E0:  MOVF   38,F
03E1:  BTFSS  03.2
03E2:  GOTO   3EE
03E3:  MOVF   37,W
03E4:  SUBLW  CC
03E5:  BTFSS  03.0
03E6:  GOTO   3EE
....................          fSensorRead = 150; 
03E7:  CLRF   3C
03E8:  CLRF   3B
03E9:  MOVLW  16
03EA:  MOVWF  3A
03EB:  MOVLW  86
03EC:  MOVWF  39
03ED:  GOTO   449
....................       else 
....................          fSensorRead = 50f / (( 2.5f * ((float) iSensorRead) ) / 1024f - 0.1f);  
03EE:  MOVF   38,W
03EF:  MOVWF  43
03F0:  MOVF   37,W
03F1:  MOVWF  42
03F2:  CALL   102
03F3:  CLRF   45
03F4:  CLRF   44
03F5:  MOVLW  20
03F6:  MOVWF  43
03F7:  MOVLW  80
03F8:  MOVWF  42
03F9:  MOVF   7A,W
03FA:  MOVWF  49
03FB:  MOVF   79,W
03FC:  MOVWF  48
03FD:  MOVF   78,W
03FE:  MOVWF  47
03FF:  MOVF   77,W
0400:  MOVWF  46
0401:  CALL   11F
0402:  MOVF   7A,W
0403:  MOVWF  45
0404:  MOVF   79,W
0405:  MOVWF  44
0406:  MOVF   78,W
0407:  MOVWF  43
0408:  MOVF   77,W
0409:  MOVWF  42
040A:  MOVF   7A,W
040B:  MOVWF  49
040C:  MOVF   79,W
040D:  MOVWF  48
040E:  MOVF   78,W
040F:  MOVWF  47
0410:  MOVF   77,W
0411:  MOVWF  46
0412:  CLRF   4D
0413:  CLRF   4C
0414:  CLRF   4B
0415:  MOVLW  89
0416:  MOVWF  4A
0417:  CALL   194
0418:  MOVF   7A,W
0419:  MOVWF  45
041A:  MOVF   79,W
041B:  MOVWF  44
041C:  MOVF   78,W
041D:  MOVWF  43
041E:  MOVF   77,W
041F:  MOVWF  42
0420:  BSF    03.1
0421:  MOVF   7A,W
0422:  MOVWF  49
0423:  MOVF   79,W
0424:  MOVWF  48
0425:  MOVF   78,W
0426:  MOVWF  47
0427:  MOVF   77,W
0428:  MOVWF  46
0429:  MOVLW  CD
042A:  MOVWF  4D
042B:  MOVLW  CC
042C:  MOVWF  4C
042D:  MOVLW  4C
042E:  MOVWF  4B
042F:  MOVLW  7B
0430:  MOVWF  4A
0431:  CALL   25E
0432:  CLRF   49
0433:  CLRF   48
0434:  MOVLW  48
0435:  MOVWF  47
0436:  MOVLW  84
0437:  MOVWF  46
0438:  MOVF   7A,W
0439:  MOVWF  4D
043A:  MOVF   79,W
043B:  MOVWF  4C
043C:  MOVF   78,W
043D:  MOVWF  4B
043E:  MOVF   77,W
043F:  MOVWF  4A
0440:  CALL   194
0441:  MOVF   7A,W
0442:  MOVWF  3C
0443:  MOVF   79,W
0444:  MOVWF  3B
0445:  MOVF   78,W
0446:  MOVWF  3A
0447:  MOVF   77,W
0448:  MOVWF  39
....................    } 
....................    fCumulativeMeasurement += fSensorRead; 
0449:  BCF    03.1
044A:  MOVF   40,W
044B:  MOVWF  49
044C:  MOVF   3F,W
044D:  MOVWF  48
044E:  MOVF   3E,W
044F:  MOVWF  47
0450:  MOVF   3D,W
0451:  MOVWF  46
0452:  MOVF   3C,W
0453:  MOVWF  4D
0454:  MOVF   3B,W
0455:  MOVWF  4C
0456:  MOVF   3A,W
0457:  MOVWF  4B
0458:  MOVF   39,W
0459:  MOVWF  4A
045A:  CALL   25E
045B:  MOVF   7A,W
045C:  MOVWF  40
045D:  MOVF   79,W
045E:  MOVWF  3F
045F:  MOVF   78,W
0460:  MOVWF  3E
0461:  MOVF   77,W
0462:  MOVWF  3D
0463:  INCF   41,F
0464:  GOTO   3C3
....................   } 
....................    
....................   return (fCumulativeMeasurement/10.0); 
0465:  MOVF   40,W
0466:  MOVWF  49
0467:  MOVF   3F,W
0468:  MOVWF  48
0469:  MOVF   3E,W
046A:  MOVWF  47
046B:  MOVF   3D,W
046C:  MOVWF  46
046D:  CLRF   4D
046E:  CLRF   4C
046F:  MOVLW  20
0470:  MOVWF  4B
0471:  MOVLW  82
0472:  MOVWF  4A
0473:  CALL   194
.................... } 
....................  
....................  
....................  
.................... void sendMeasurements(signed int8 zAngle, signed int8 yAngle, unsigned int16 distance) 
.................... { 
....................    char characterToSend; 
....................    characterToSend = *((char*)&(zAngle)); 
*
05A2:  CLRF   35
05A3:  MOVLW  2F
05A4:  MOVWF  34
05A5:  MOVF   34,W
05A6:  MOVWF  04
05A7:  BCF    03.7
05A8:  BTFSC  35.0
05A9:  BSF    03.7
05AA:  MOVF   00,W
05AB:  MOVWF  33
....................    putc((int)characterToSend); 
05AC:  MOVF   33,W
05AD:  BTFSS  0C.4
05AE:  GOTO   5AD
05AF:  MOVWF  19
....................     
....................    characterToSend = *((char*)&(yAngle)); 
05B0:  CLRF   35
05B1:  MOVLW  30
05B2:  MOVWF  34
05B3:  MOVF   34,W
05B4:  MOVWF  04
05B5:  BCF    03.7
05B6:  BTFSC  35.0
05B7:  BSF    03.7
05B8:  MOVF   00,W
05B9:  MOVWF  33
....................    putc((int)characterToSend); 
05BA:  MOVF   33,W
05BB:  BTFSS  0C.4
05BC:  GOTO   5BB
05BD:  MOVWF  19
....................     
....................    characterToSend = *((char*)&(distance)); 
05BE:  CLRF   35
05BF:  MOVLW  31
05C0:  MOVWF  34
05C1:  MOVF   34,W
05C2:  MOVWF  04
05C3:  BCF    03.7
05C4:  BTFSC  35.0
05C5:  BSF    03.7
05C6:  MOVF   00,W
05C7:  MOVWF  33
....................    putc((int)characterToSend); 
05C8:  MOVF   33,W
05C9:  BTFSS  0C.4
05CA:  GOTO   5C9
05CB:  MOVWF  19
....................    characterToSend = *(((char*)&(distance))+1); 
05CC:  CLRF   7A
05CD:  MOVLW  32
05CE:  MOVWF  04
05CF:  BCF    03.7
05D0:  BTFSC  7A.0
05D1:  BSF    03.7
05D2:  MOVF   00,W
05D3:  MOVWF  33
....................    putc((int)characterToSend); 
05D4:  MOVF   33,W
05D5:  BTFSS  0C.4
05D6:  GOTO   5D5
05D7:  MOVWF  19
05D8:  BCF    0A.3
05D9:  BCF    0A.4
05DA:  GOTO   630 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
05DB:  MOVF   03,W
05DC:  ANDLW  1F
05DD:  MOVWF  03
05DE:  MOVLW  71
05DF:  BSF    03.5
05E0:  MOVWF  0F
05E1:  CLRF   10
05E2:  MOVF   0F,W
05E3:  BCF    03.5
05E4:  CLRF   20
05E5:  BSF    03.5
05E6:  BSF    03.6
05E7:  BCF    07.3
05E8:  MOVLW  0C
05E9:  BCF    03.6
05EA:  MOVWF  19
05EB:  MOVLW  A2
05EC:  MOVWF  18
05ED:  MOVLW  90
05EE:  BCF    03.5
05EF:  MOVWF  18
05F0:  CLRF   26
05F1:  CLRF   25
05F2:  MOVLW  13
05F3:  MOVWF  24
05F4:  MOVLW  88
05F5:  MOVWF  23
05F6:  BCF    29.0
05F7:  BCF    29.1
05F8:  MOVLW  FF
05F9:  MOVWF  2A
05FA:  BSF    03.5
05FB:  BSF    03.6
05FC:  MOVF   09,W
05FD:  ANDLW  C0
05FE:  MOVWF  09
05FF:  BCF    03.6
0600:  BCF    1F.4
0601:  BCF    1F.5
0602:  MOVLW  00
0603:  BSF    03.6
0604:  MOVWF  08
0605:  BCF    03.5
0606:  CLRF   07
0607:  CLRF   08
0608:  CLRF   09
0609:  BCF    03.7
.................... { 
....................    /* Declarations */ 
....................    unsigned int16 iRangeMeasurement; 
....................    signed int8 iAngleZ, iAngleX; 
....................  
....................       /* Initialize hardware */ 
....................       setup_oscillator(OSC_8MHZ,2); 
*
060F:  MOVLW  71
0610:  BSF    03.5
0611:  MOVWF  0F
0612:  MOVLW  02
0613:  MOVWF  10
0614:  MOVF   0F,W
....................       initStepper(); 
0615:  BCF    03.5
0616:  GOTO   00C
....................       initSensors(); 
0617:  GOTO   017
....................  
....................       while(TRUE) 
....................       { 
....................          /* Move the motor and recieve motors positions */ 
....................          stepperMotorSequence(&iAngleX, &iAngleZ); 
0618:  CLRF   30
0619:  MOVLW  2E
061A:  MOVWF  2F
061B:  CLRF   32
061C:  MOVLW  2D
061D:  MOVWF  31
061E:  GOTO   06B
....................          /* Wait for the motor to settle */ 
....................          delay_ms(50); 
061F:  MOVLW  32
0620:  MOVWF  2F
0621:  GOTO   0C8
....................          /* Read the sensor value */ 
....................          iRangeMeasurement = readRangeSensor(); 
0622:  GOTO   3BE
0623:  MOVF   79,W
0624:  MOVWF  2C
0625:  MOVF   78,W
0626:  MOVWF  2B
....................          /* Send the measurements to the PC */ 
....................          sendMeasurements(iAngleX, iAngleZ, iRangeMeasurement); 
0627:  MOVF   2E,W
0628:  MOVWF  2F
0629:  MOVF   2D,W
062A:  MOVWF  30
062B:  MOVF   2C,W
062C:  MOVWF  32
062D:  MOVF   2B,W
062E:  MOVWF  31
062F:  GOTO   5A2
0630:  GOTO   618
....................          //printf("%f\n", fRangeMeasurement); 
....................      } 
....................     
.................... } 
0631:  GOTO   631

Configuration Fuses:
   Word  1: 0CF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP DEBUG
   Word  2: 3FFF   BORV40 NOWRT

   Some fuses have been forced to be compatible with the ICD debugger.
