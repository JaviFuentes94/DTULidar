CCS PCM C Compiler, Version 5.026, 18875               05-dec-17 16:39

               Filename:   C:\Users\User\Google Drev\DTU Elektro\5. semester\Digital Instrumentering\30021_project\DTULidar\Complete\main.lst

               ROM used:   1603 words (20%)
                           Largest free fragment is 2048
               RAM used:   20 (6%) at main() level
                           59 (17%) worst case
               Stack used: 3 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  05
0002:  MOVWF  0A
0003:  GOTO   5EC
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  05
0009:  RETLW  09
000A:  RETLW  0A
000B:  RETLW  06
*
0108:  MOVLW  8E
0109:  MOVWF  77
010A:  MOVF   43,W
010B:  MOVWF  78
010C:  MOVF   42,W
010D:  MOVWF  79
010E:  CLRF   7A
010F:  MOVF   78,F
0110:  BTFSS  03.2
0111:  GOTO   11C
0112:  MOVF   79,W
0113:  MOVWF  78
0114:  CLRF   79
0115:  MOVLW  08
0116:  SUBWF  77,F
0117:  MOVF   78,F
0118:  BTFSS  03.2
0119:  GOTO   11C
011A:  CLRF   77
011B:  GOTO   124
011C:  BCF    03.0
011D:  BTFSC  78.7
011E:  GOTO   123
011F:  RLF    79,F
0120:  RLF    78,F
0121:  DECF   77,F
0122:  GOTO   11C
0123:  BCF    78.7
0124:  RETURN
0125:  MOVF   42,W
0126:  BTFSC  03.2
0127:  GOTO   195
0128:  MOVWF  4A
0129:  MOVF   46,W
012A:  BTFSC  03.2
012B:  GOTO   195
012C:  ADDWF  4A,F
012D:  BTFSC  03.0
012E:  GOTO   136
012F:  MOVLW  7F
0130:  SUBWF  4A,F
0131:  BTFSS  03.0
0132:  GOTO   195
0133:  BTFSC  03.2
0134:  GOTO   195
0135:  GOTO   13A
0136:  MOVLW  81
0137:  ADDWF  4A,F
0138:  BTFSC  03.0
0139:  GOTO   195
013A:  MOVF   4A,W
013B:  MOVWF  77
013C:  CLRF   78
013D:  CLRF   79
013E:  CLRF   7A
013F:  MOVF   43,W
0140:  MOVWF  4E
0141:  BSF    4E.7
0142:  MOVF   44,W
0143:  MOVWF  4D
0144:  MOVF   45,W
0145:  MOVWF  4C
0146:  MOVLW  18
0147:  MOVWF  4A
0148:  CLRF   4B
0149:  BTFSS  4C.0
014A:  GOTO   163
014B:  MOVF   49,W
014C:  ADDWF  7A,F
014D:  BTFSS  03.0
014E:  GOTO   155
014F:  INCF   79,F
0150:  BTFSS  03.2
0151:  GOTO   155
0152:  INCF   78,F
0153:  BTFSC  03.2
0154:  BSF    4B.7
0155:  MOVF   48,W
0156:  ADDWF  79,F
0157:  BTFSS  03.0
0158:  GOTO   15C
0159:  INCF   78,F
015A:  BTFSC  03.2
015B:  BSF    4B.7
015C:  MOVF   47,W
015D:  MOVWF  44
015E:  BSF    44.7
015F:  MOVF   44,W
0160:  ADDWF  78,F
0161:  BTFSC  03.0
0162:  BSF    4B.7
0163:  RLF    4B,F
0164:  RRF    78,F
0165:  RRF    79,F
0166:  RRF    7A,F
0167:  RRF    4E,F
0168:  RRF    4D,F
0169:  RRF    4C,F
016A:  BCF    03.0
016B:  DECFSZ 4A,F
016C:  GOTO   148
016D:  MOVLW  01
016E:  ADDWF  77,F
016F:  BTFSC  03.0
0170:  GOTO   195
0171:  BTFSC  78.7
0172:  GOTO   17A
0173:  RLF    4E,F
0174:  RLF    7A,F
0175:  RLF    79,F
0176:  RLF    78,F
0177:  DECF   77,F
0178:  BTFSC  03.2
0179:  GOTO   195
017A:  BTFSS  4E.7
017B:  GOTO   18B
017C:  INCF   7A,F
017D:  BTFSS  03.2
017E:  GOTO   18B
017F:  INCF   79,F
0180:  BTFSS  03.2
0181:  GOTO   18B
0182:  INCF   78,F
0183:  BTFSS  03.2
0184:  GOTO   18B
0185:  RRF    78,F
0186:  RRF    79,F
0187:  RRF    7A,F
0188:  INCF   77,F
0189:  BTFSC  03.2
018A:  GOTO   195
018B:  MOVF   43,W
018C:  MOVWF  4B
018D:  MOVF   47,W
018E:  XORWF  4B,F
018F:  BTFSS  4B.7
0190:  GOTO   193
0191:  BSF    78.7
0192:  GOTO   199
0193:  BCF    78.7
0194:  GOTO   199
0195:  CLRF   77
0196:  CLRF   78
0197:  CLRF   79
0198:  CLRF   7A
0199:  RETURN
019A:  MOVF   46,W
019B:  BTFSC  03.2
019C:  GOTO   25F
019D:  MOVWF  52
019E:  MOVF   4A,W
019F:  BTFSC  03.2
01A0:  GOTO   25F
01A1:  SUBWF  52,F
01A2:  BTFSS  03.0
01A3:  GOTO   1A9
01A4:  MOVLW  7F
01A5:  ADDWF  52,F
01A6:  BTFSC  03.0
01A7:  GOTO   25F
01A8:  GOTO   1AF
01A9:  MOVLW  81
01AA:  SUBWF  52,F
01AB:  BTFSS  03.0
01AC:  GOTO   25F
01AD:  BTFSC  03.2
01AE:  GOTO   25F
01AF:  MOVF   52,W
01B0:  MOVWF  77
01B1:  CLRF   78
01B2:  CLRF   79
01B3:  CLRF   7A
01B4:  CLRF   51
01B5:  MOVF   47,W
01B6:  MOVWF  50
01B7:  BSF    50.7
01B8:  MOVF   48,W
01B9:  MOVWF  4F
01BA:  MOVF   49,W
01BB:  MOVWF  4E
01BC:  MOVLW  19
01BD:  MOVWF  52
01BE:  MOVF   4D,W
01BF:  SUBWF  4E,F
01C0:  BTFSC  03.0
01C1:  GOTO   1D2
01C2:  MOVLW  01
01C3:  SUBWF  4F,F
01C4:  BTFSC  03.0
01C5:  GOTO   1D2
01C6:  SUBWF  50,F
01C7:  BTFSC  03.0
01C8:  GOTO   1D2
01C9:  SUBWF  51,F
01CA:  BTFSC  03.0
01CB:  GOTO   1D2
01CC:  INCF   51,F
01CD:  INCF   50,F
01CE:  INCF   4F,F
01CF:  MOVF   4D,W
01D0:  ADDWF  4E,F
01D1:  GOTO   204
01D2:  MOVF   4C,W
01D3:  SUBWF  4F,F
01D4:  BTFSC  03.0
01D5:  GOTO   1ED
01D6:  MOVLW  01
01D7:  SUBWF  50,F
01D8:  BTFSC  03.0
01D9:  GOTO   1ED
01DA:  SUBWF  51,F
01DB:  BTFSC  03.0
01DC:  GOTO   1ED
01DD:  INCF   51,F
01DE:  INCF   50,F
01DF:  MOVF   4C,W
01E0:  ADDWF  4F,F
01E1:  MOVF   4D,W
01E2:  ADDWF  4E,F
01E3:  BTFSS  03.0
01E4:  GOTO   204
01E5:  INCF   4F,F
01E6:  BTFSS  03.2
01E7:  GOTO   204
01E8:  INCF   50,F
01E9:  BTFSS  03.2
01EA:  GOTO   204
01EB:  INCF   51,F
01EC:  GOTO   204
01ED:  MOVF   4B,W
01EE:  IORLW  80
01EF:  SUBWF  50,F
01F0:  BTFSC  03.0
01F1:  GOTO   203
01F2:  MOVLW  01
01F3:  SUBWF  51,F
01F4:  BTFSC  03.0
01F5:  GOTO   203
01F6:  INCF   51,F
01F7:  MOVF   4B,W
01F8:  IORLW  80
01F9:  ADDWF  50,F
01FA:  MOVF   4C,W
01FB:  ADDWF  4F,F
01FC:  BTFSS  03.0
01FD:  GOTO   1E1
01FE:  INCF   50,F
01FF:  BTFSS  03.2
0200:  GOTO   1E1
0201:  INCF   51,F
0202:  GOTO   1E1
0203:  BSF    7A.0
0204:  DECFSZ 52,F
0205:  GOTO   207
0206:  GOTO   212
0207:  BCF    03.0
0208:  RLF    4E,F
0209:  RLF    4F,F
020A:  RLF    50,F
020B:  RLF    51,F
020C:  BCF    03.0
020D:  RLF    7A,F
020E:  RLF    79,F
020F:  RLF    78,F
0210:  RLF    53,F
0211:  GOTO   1BE
0212:  BTFSS  53.0
0213:  GOTO   21A
0214:  BCF    03.0
0215:  RRF    78,F
0216:  RRF    79,F
0217:  RRF    7A,F
0218:  RRF    53,F
0219:  GOTO   21D
021A:  DECF   77,F
021B:  BTFSC  03.2
021C:  GOTO   25F
021D:  BTFSC  53.7
021E:  GOTO   246
021F:  BCF    03.0
0220:  RLF    4E,F
0221:  RLF    4F,F
0222:  RLF    50,F
0223:  RLF    51,F
0224:  MOVF   4D,W
0225:  SUBWF  4E,F
0226:  BTFSC  03.0
0227:  GOTO   232
0228:  MOVLW  01
0229:  SUBWF  4F,F
022A:  BTFSC  03.0
022B:  GOTO   232
022C:  SUBWF  50,F
022D:  BTFSC  03.0
022E:  GOTO   232
022F:  SUBWF  51,F
0230:  BTFSS  03.0
0231:  GOTO   255
0232:  MOVF   4C,W
0233:  SUBWF  4F,F
0234:  BTFSC  03.0
0235:  GOTO   23D
0236:  MOVLW  01
0237:  SUBWF  50,F
0238:  BTFSC  03.0
0239:  GOTO   23D
023A:  SUBWF  51,F
023B:  BTFSS  03.0
023C:  GOTO   255
023D:  MOVF   4B,W
023E:  IORLW  80
023F:  SUBWF  50,F
0240:  BTFSC  03.0
0241:  GOTO   246
0242:  MOVLW  01
0243:  SUBWF  51,F
0244:  BTFSS  03.0
0245:  GOTO   255
0246:  INCF   7A,F
0247:  BTFSS  03.2
0248:  GOTO   255
0249:  INCF   79,F
024A:  BTFSS  03.2
024B:  GOTO   255
024C:  INCF   78,F
024D:  BTFSS  03.2
024E:  GOTO   255
024F:  INCF   77,F
0250:  BTFSC  03.2
0251:  GOTO   25F
0252:  RRF    78,F
0253:  RRF    79,F
0254:  RRF    7A,F
0255:  MOVF   47,W
0256:  MOVWF  52
0257:  MOVF   4B,W
0258:  XORWF  52,F
0259:  BTFSS  52.7
025A:  GOTO   25D
025B:  BSF    78.7
025C:  GOTO   263
025D:  BCF    78.7
025E:  GOTO   263
025F:  CLRF   77
0260:  CLRF   78
0261:  CLRF   79
0262:  CLRF   7A
0263:  RETURN
0264:  MOVLW  80
0265:  BTFSC  03.1
0266:  XORWF  4B,F
0267:  CLRF   50
0268:  CLRF   51
0269:  MOVF   47,W
026A:  MOVWF  4F
026B:  MOVF   4B,W
026C:  XORWF  4F,F
026D:  MOVF   46,W
026E:  BTFSC  03.2
026F:  GOTO   354
0270:  MOVWF  4E
0271:  MOVWF  77
0272:  MOVF   4A,W
0273:  BTFSC  03.2
0274:  GOTO   35D
0275:  SUBWF  4E,F
0276:  BTFSC  03.2
0277:  GOTO   2F9
0278:  BTFSS  03.0
0279:  GOTO   2B7
027A:  MOVF   4B,W
027B:  MOVWF  54
027C:  BSF    54.7
027D:  MOVF   4C,W
027E:  MOVWF  53
027F:  MOVF   4D,W
0280:  MOVWF  52
0281:  CLRF   51
0282:  BCF    03.0
0283:  RRF    54,F
0284:  RRF    53,F
0285:  RRF    52,F
0286:  RRF    51,F
0287:  DECFSZ 4E,F
0288:  GOTO   281
0289:  BTFSS  4F.7
028A:  GOTO   28E
028B:  BSF    50.0
028C:  GOTO   371
028D:  BCF    50.0
028E:  BCF    4E.0
028F:  BSF    50.4
0290:  MOVLW  49
0291:  MOVWF  04
0292:  BCF    03.7
0293:  GOTO   386
0294:  BCF    50.4
0295:  BTFSC  4F.7
0296:  GOTO   2A1
0297:  BTFSS  4E.0
0298:  GOTO   2AC
0299:  RRF    54,F
029A:  RRF    53,F
029B:  RRF    52,F
029C:  RRF    51,F
029D:  INCF   77,F
029E:  BTFSC  03.2
029F:  GOTO   36C
02A0:  GOTO   2AC
02A1:  BTFSC  54.7
02A2:  GOTO   2AF
02A3:  BCF    03.0
02A4:  RLF    51,F
02A5:  RLF    52,F
02A6:  RLF    53,F
02A7:  RLF    54,F
02A8:  DECF   77,F
02A9:  BTFSC  03.2
02AA:  GOTO   36C
02AB:  GOTO   2A1
02AC:  BSF    50.6
02AD:  GOTO   319
02AE:  BCF    50.6
02AF:  MOVF   47,W
02B0:  MOVWF  4F
02B1:  BTFSS  4F.7
02B2:  GOTO   2B5
02B3:  BSF    54.7
02B4:  GOTO   365
02B5:  BCF    54.7
02B6:  GOTO   365
02B7:  MOVF   4A,W
02B8:  MOVWF  4E
02B9:  MOVWF  77
02BA:  MOVF   46,W
02BB:  SUBWF  4E,F
02BC:  MOVF   47,W
02BD:  MOVWF  54
02BE:  BSF    54.7
02BF:  MOVF   48,W
02C0:  MOVWF  53
02C1:  MOVF   49,W
02C2:  MOVWF  52
02C3:  CLRF   51
02C4:  BCF    03.0
02C5:  RRF    54,F
02C6:  RRF    53,F
02C7:  RRF    52,F
02C8:  RRF    51,F
02C9:  DECFSZ 4E,F
02CA:  GOTO   2C3
02CB:  BTFSS  4F.7
02CC:  GOTO   2D0
02CD:  BSF    50.1
02CE:  GOTO   371
02CF:  BCF    50.1
02D0:  BCF    4E.0
02D1:  BSF    50.5
02D2:  MOVLW  4D
02D3:  MOVWF  04
02D4:  BCF    03.7
02D5:  GOTO   386
02D6:  BCF    50.5
02D7:  BTFSC  4F.7
02D8:  GOTO   2E3
02D9:  BTFSS  4E.0
02DA:  GOTO   2EE
02DB:  RRF    54,F
02DC:  RRF    53,F
02DD:  RRF    52,F
02DE:  RRF    51,F
02DF:  INCF   77,F
02E0:  BTFSC  03.2
02E1:  GOTO   36C
02E2:  GOTO   2EE
02E3:  BTFSC  54.7
02E4:  GOTO   2F1
02E5:  BCF    03.0
02E6:  RLF    51,F
02E7:  RLF    52,F
02E8:  RLF    53,F
02E9:  RLF    54,F
02EA:  DECF   77,F
02EB:  BTFSC  03.2
02EC:  GOTO   36C
02ED:  GOTO   2E3
02EE:  BSF    50.7
02EF:  GOTO   319
02F0:  BCF    50.7
02F1:  MOVF   4B,W
02F2:  MOVWF  4F
02F3:  BTFSS  4F.7
02F4:  GOTO   2F7
02F5:  BSF    54.7
02F6:  GOTO   365
02F7:  BCF    54.7
02F8:  GOTO   365
02F9:  MOVF   4B,W
02FA:  MOVWF  54
02FB:  BSF    54.7
02FC:  MOVF   4C,W
02FD:  MOVWF  53
02FE:  MOVF   4D,W
02FF:  MOVWF  52
0300:  BTFSS  4F.7
0301:  GOTO   306
0302:  BCF    54.7
0303:  BSF    50.2
0304:  GOTO   371
0305:  BCF    50.2
0306:  CLRF   51
0307:  BCF    4E.0
0308:  MOVLW  49
0309:  MOVWF  04
030A:  BCF    03.7
030B:  GOTO   386
030C:  BTFSC  4F.7
030D:  GOTO   32F
030E:  MOVF   47,W
030F:  MOVWF  4F
0310:  BTFSS  4E.0
0311:  GOTO   319
0312:  RRF    54,F
0313:  RRF    53,F
0314:  RRF    52,F
0315:  RRF    51,F
0316:  INCF   77,F
0317:  BTFSC  03.2
0318:  GOTO   36C
0319:  BTFSS  51.7
031A:  GOTO   32A
031B:  INCF   52,F
031C:  BTFSS  03.2
031D:  GOTO   32A
031E:  INCF   53,F
031F:  BTFSS  03.2
0320:  GOTO   32A
0321:  INCF   54,F
0322:  BTFSS  03.2
0323:  GOTO   32A
0324:  RRF    54,F
0325:  RRF    53,F
0326:  RRF    52,F
0327:  INCF   77,F
0328:  BTFSC  03.2
0329:  GOTO   36C
032A:  BTFSC  50.6
032B:  GOTO   2AE
032C:  BTFSC  50.7
032D:  GOTO   2F0
032E:  GOTO   34E
032F:  MOVLW  80
0330:  XORWF  54,F
0331:  BTFSS  54.7
0332:  GOTO   337
0333:  GOTO   371
0334:  MOVF   4B,W
0335:  MOVWF  4F
0336:  GOTO   344
0337:  MOVF   47,W
0338:  MOVWF  4F
0339:  MOVF   54,F
033A:  BTFSS  03.2
033B:  GOTO   344
033C:  MOVF   53,F
033D:  BTFSS  03.2
033E:  GOTO   344
033F:  MOVF   52,F
0340:  BTFSS  03.2
0341:  GOTO   344
0342:  CLRF   77
0343:  GOTO   365
0344:  BTFSC  54.7
0345:  GOTO   34E
0346:  BCF    03.0
0347:  RLF    51,F
0348:  RLF    52,F
0349:  RLF    53,F
034A:  RLF    54,F
034B:  DECFSZ 77,F
034C:  GOTO   344
034D:  GOTO   36C
034E:  BTFSS  4F.7
034F:  GOTO   352
0350:  BSF    54.7
0351:  GOTO   365
0352:  BCF    54.7
0353:  GOTO   365
0354:  MOVF   4A,W
0355:  MOVWF  77
0356:  MOVF   4B,W
0357:  MOVWF  54
0358:  MOVF   4C,W
0359:  MOVWF  53
035A:  MOVF   4D,W
035B:  MOVWF  52
035C:  GOTO   365
035D:  MOVF   46,W
035E:  MOVWF  77
035F:  MOVF   47,W
0360:  MOVWF  54
0361:  MOVF   48,W
0362:  MOVWF  53
0363:  MOVF   49,W
0364:  MOVWF  52
0365:  MOVF   54,W
0366:  MOVWF  78
0367:  MOVF   53,W
0368:  MOVWF  79
0369:  MOVF   52,W
036A:  MOVWF  7A
036B:  GOTO   3A4
036C:  CLRF   77
036D:  CLRF   78
036E:  CLRF   79
036F:  CLRF   7A
0370:  GOTO   3A4
0371:  CLRF   51
0372:  COMF   52,F
0373:  COMF   53,F
0374:  COMF   54,F
0375:  COMF   51,F
0376:  INCF   51,F
0377:  BTFSS  03.2
0378:  GOTO   37F
0379:  INCF   52,F
037A:  BTFSS  03.2
037B:  GOTO   37F
037C:  INCF   53,F
037D:  BTFSC  03.2
037E:  INCF   54,F
037F:  BTFSC  50.0
0380:  GOTO   28D
0381:  BTFSC  50.1
0382:  GOTO   2CF
0383:  BTFSC  50.2
0384:  GOTO   305
0385:  GOTO   334
0386:  MOVF   00,W
0387:  ADDWF  52,F
0388:  BTFSS  03.0
0389:  GOTO   390
038A:  INCF   53,F
038B:  BTFSS  03.2
038C:  GOTO   390
038D:  INCF   54,F
038E:  BTFSC  03.2
038F:  BSF    4E.0
0390:  DECF   04,F
0391:  MOVF   00,W
0392:  ADDWF  53,F
0393:  BTFSS  03.0
0394:  GOTO   398
0395:  INCF   54,F
0396:  BTFSC  03.2
0397:  BSF    4E.0
0398:  DECF   04,F
0399:  MOVF   00,W
039A:  BTFSS  00.7
039B:  XORLW  80
039C:  ADDWF  54,F
039D:  BTFSC  03.0
039E:  BSF    4E.0
039F:  BTFSC  50.4
03A0:  GOTO   294
03A1:  BTFSC  50.5
03A2:  GOTO   2D6
03A3:  GOTO   30C
03A4:  RETURN
03A5:  MOVLW  8E
03A6:  MOVWF  77
03A7:  MOVF   37,W
03A8:  SUBWF  77,F
03A9:  MOVF   38,W
03AA:  MOVWF  79
03AB:  MOVF   39,W
03AC:  MOVWF  78
03AD:  BSF    79.7
03AE:  MOVF   77,F
03AF:  BTFSC  03.2
03B0:  GOTO   3BC
03B1:  BCF    03.0
03B2:  MOVF   79,F
03B3:  BTFSS  03.2
03B4:  GOTO   3B8
03B5:  MOVF   78,F
03B6:  BTFSC  03.2
03B7:  GOTO   3BC
03B8:  RRF    79,F
03B9:  RRF    78,F
03BA:  DECFSZ 77,F
03BB:  GOTO   3B1
03BC:  BTFSS  38.7
03BD:  GOTO   3C3
03BE:  COMF   78,F
03BF:  COMF   79,F
03C0:  INCF   78,F
03C1:  BTFSC  03.2
03C2:  INCF   79,F
03C3:  RETURN
*
055A:  MOVF   38,W
055B:  MOVWF  3F
055C:  MOVF   3C,W
055D:  XORWF  3F,F
055E:  BTFSS  3F.7
055F:  GOTO   565
0560:  BCF    03.2
0561:  BCF    03.0
0562:  BTFSC  38.7
0563:  BSF    03.0
0564:  GOTO   598
0565:  MOVF   38,W
0566:  MOVWF  3F
0567:  MOVF   3B,W
0568:  MOVWF  40
0569:  MOVF   37,W
056A:  SUBWF  40,F
056B:  BTFSC  03.2
056C:  GOTO   573
056D:  BTFSS  3F.7
056E:  GOTO   598
056F:  MOVF   03,W
0570:  XORLW  01
0571:  MOVWF  03
0572:  GOTO   598
0573:  MOVF   3C,W
0574:  MOVWF  40
0575:  MOVF   38,W
0576:  SUBWF  40,F
0577:  BTFSC  03.2
0578:  GOTO   57F
0579:  BTFSS  3F.7
057A:  GOTO   598
057B:  MOVF   03,W
057C:  XORLW  01
057D:  MOVWF  03
057E:  GOTO   598
057F:  MOVF   3D,W
0580:  MOVWF  40
0581:  MOVF   39,W
0582:  SUBWF  40,F
0583:  BTFSC  03.2
0584:  GOTO   58B
0585:  BTFSS  3F.7
0586:  GOTO   598
0587:  MOVF   03,W
0588:  XORLW  01
0589:  MOVWF  03
058A:  GOTO   598
058B:  MOVF   3E,W
058C:  MOVWF  40
058D:  MOVF   3A,W
058E:  SUBWF  40,F
058F:  BTFSC  03.2
0590:  GOTO   597
0591:  BTFSS  3F.7
0592:  GOTO   598
0593:  MOVF   03,W
0594:  XORLW  01
0595:  MOVWF  03
0596:  GOTO   598
0597:  BCF    03.0
....................  
.................... #list 
....................  
.................... #device ICD=true 
.................... #device ADC=10 
....................   
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................   
.................... #use delay(internal=8000000,clock_out) 
*
006E:  MOVLW  34
006F:  MOVWF  04
0070:  BCF    03.7
0071:  MOVF   00,W
0072:  BTFSC  03.2
0073:  GOTO   081
0074:  MOVLW  02
0075:  MOVWF  78
0076:  CLRF   77
0077:  DECFSZ 77,F
0078:  GOTO   077
0079:  DECFSZ 78,F
007A:  GOTO   076
007B:  MOVLW  97
007C:  MOVWF  77
007D:  DECFSZ 77,F
007E:  GOTO   07D
007F:  DECFSZ 00,F
0080:  GOTO   074
0081:  RETURN
....................   
.................... #use rs232( baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, ERRORS) 
....................   
.................... //#use RS232 (DEBUGGER) 
....................   
.................... //#use  I2C(master, sda=PIN_C4, scl= PIN_C3) 
....................  
....................  
.................... #include "lib/stepperControl.c" 
.................... #include "stepperControl.h" 
.................... #ifndef stepperControl 
.................... #define stepperControl 
....................  
.................... /*Defines*/ 
.................... #define BOTTOM_MOTOR 0  
.................... #define TOP_MOTOR 1 
.................... #define BOTTOM_MOTOR_LIMIT 100 
.................... #define TOP_MOTOR_LIMIT 30 
.................... #BYTE portc = 7      // Port used to control motor 
.................... #BYTE portd = 8      // PIC16F887 datasheet page 25 
....................  
.................... /* Globals */ 
.................... BYTE const POSITIONS[4] = { 0b0101, 0b1001, 0b1010, 0b0110 }; 
.................... unsigned int8 iCurrentState[2] = { 0 }; /* This variable keeps track of the current state */ 
*
061B:  BCF    03.6
061C:  CLRF   21
061D:  CLRF   22
.................... unsigned int32 iDelay = 5000; // delay default 5ms 
.................... signed int8 iGlobalPosition[2] = { 0 }; 
061E:  CLRF   27
061F:  CLRF   28
.................... int1  bSequenceOver = FALSE; 
.................... int1  bGlobalGoUp = FALSE; 
....................  
.................... /* Function declarations */ 
.................... void initStepper(void); 
.................... void stepperRotateSingleRight(int motor); 
.................... void stepperRotateSingleLeft(int motor); 
.................... int16 moveMeasure(int measureTime_ms, int rotation); 
.................... void stepperRotate180right(int timeDelay_us, int motor); 
.................... void stepperRotate180left(int timeDelay_us, int motor); 
.................... void stepperMotorSequenceBottom(void); 
.................... void stepperMotorSequence(signed int8 * angleX, signed int8 * angleZ); 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... void initStepper() 
.................... { 
....................    set_tris_c(0xF0); 
*
000C:  MOVLW  F0
000D:  BSF    03.5
000E:  MOVWF  07
000F:  BCF    03.5
0010:  MOVWF  2A
....................    set_tris_d(0xF0); 
0011:  BSF    03.5
0012:  MOVWF  08
0013:  BCF    03.5
0014:  BCF    0A.3
0015:  BCF    0A.4
0016:  GOTO   628 (RETURN)
.................... } 
....................  
.................... void stepperMotorSequenceBottom() 
.................... { 
....................    stepperRotateSingleLeft(BOTTOM_MOTOR); 
*
0082:  CLRF   33
0083:  CALL   037
....................    iGlobalPosition[BOTTOM_MOTOR]++; 
0084:  INCF   27,F
....................    bGlobalGoUp = !bGlobalGoUp; 
0085:  MOVLW  02
0086:  XORWF  29,F
....................    delay_ms(1000); 
0087:  MOVLW  04
0088:  MOVWF  33
0089:  MOVLW  FA
008A:  MOVWF  34
008B:  CALL   06E
008C:  DECFSZ 33,F
008D:  GOTO   089
....................  
....................    if(iGlobalPosition[BOTTOM_MOTOR] == BOTTOM_MOTOR_LIMIT) 
008E:  MOVF   27,W
008F:  SUBLW  64
0090:  BTFSC  03.2
....................    { 
....................       bSequenceOver = True; 
0091:  BSF    29.0
....................    } 
0092:  RETURN
.................... } 
....................  
.................... void stepperMotorSequence(signed int8 * angleX, signed int8 * angleZ) 
.................... { 
....................    if(bSequenceOver) 
0093:  BTFSC  29.0
....................    { 
....................       return; 
0094:  GOTO   0E1
....................    } 
....................  
....................    if(bGlobalGoUp == TRUE) 
0095:  BTFSS  29.1
0096:  GOTO   0C9
....................    { 
....................       if(iGlobalPosition[TOP_MOTOR] == TOP_MOTOR_LIMIT) 
0097:  MOVF   28,W
0098:  SUBLW  1E
0099:  BTFSS  03.2
009A:  GOTO   09D
....................       { 
....................          stepperMotorSequenceBottom(); 
009B:  CALL   082
....................       } 
009C:  GOTO   0C8
....................       else 
....................       { 
....................          stepperRotateSingleRight(TOP_MOTOR);       
009D:  MOVLW  01
009E:  MOVWF  33
....................          iGlobalPosition[TOP_MOTOR]++;          
*
00C7:  INCF   28,F
....................       } 
....................    } 
00C8:  GOTO   0D3
....................    else 
....................    { 
....................       if(iGlobalPosition[TOP_MOTOR] == (-1*TOP_MOTOR_LIMIT)) 
00C9:  MOVF   28,W
00CA:  SUBLW  E2
00CB:  BTFSS  03.2
00CC:  GOTO   0CF
....................       { 
....................          stepperMotorSequenceBottom(); 
00CD:  CALL   082
....................       } 
00CE:  GOTO   0D3
....................       else 
....................       { 
....................          stepperRotateSingleLeft(TOP_MOTOR);       
00CF:  MOVLW  01
00D0:  MOVWF  33
00D1:  CALL   037
....................          iGlobalPosition[TOP_MOTOR]--;                
00D2:  DECF   28,F
....................       } 
....................    } 
....................     
....................    *angleZ = iGlobalPosition[BOTTOM_MOTOR]; 
00D3:  MOVF   31,W
00D4:  MOVWF  04
00D5:  BCF    03.7
00D6:  BTFSC  32.0
00D7:  BSF    03.7
00D8:  MOVF   27,W
00D9:  MOVWF  00
....................    *angleX = iGlobalPosition[TOP_MOTOR]; 
00DA:  MOVF   2F,W
00DB:  MOVWF  04
00DC:  BCF    03.7
00DD:  BTFSC  30.0
00DE:  BSF    03.7
00DF:  MOVF   28,W
00E0:  MOVWF  00
00E1:  BCF    0A.3
00E2:  BCF    0A.4
00E3:  GOTO   630 (RETURN)
.................... } 
....................  
.................... void stepperRotateSingleRight(int1 motor) 
.................... { 
....................    iCurrentState[motor] = ((iCurrentState[motor]+1)&3); 
*
009F:  MOVLW  21
00A0:  ADDWF  33,W
00A1:  MOVWF  78
00A2:  CLRF   7A
00A3:  BTFSC  03.0
00A4:  INCF   7A,F
00A5:  MOVLW  21
00A6:  ADDWF  33,W
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  MOVLW  01
00AA:  ADDWF  00,W
00AB:  ANDLW  03
00AC:  MOVWF  36
00AD:  MOVF   78,W
00AE:  MOVWF  04
00AF:  BCF    03.7
00B0:  BTFSC  7A.0
00B1:  BSF    03.7
00B2:  MOVF   36,W
00B3:  MOVWF  00
....................       
....................      /* Set outputs to move the motor */ 
....................    if(motor == 1) 
00B4:  DECFSZ 33,W
00B5:  GOTO   0BF
....................    { 
....................       portc = POSITIONS[iCurrentState[motor]]; 
00B6:  MOVLW  21
00B7:  ADDWF  33,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  CALL   004
00BC:  MOVWF  78
00BD:  MOVWF  07
....................    } 
00BE:  GOTO   0C7
....................    else 
....................    { 
....................       portd = POSITIONS[iCurrentState[motor]]; 
00BF:  MOVLW  21
00C0:  ADDWF  33,W
00C1:  MOVWF  04
00C2:  BCF    03.7
00C3:  MOVF   00,W
00C4:  CALL   004
00C5:  MOVWF  78
00C6:  MOVWF  08
....................    }         
.................... } 
....................  
.................... void stepperRotateSingleLeft(int1 motor) 
.................... { 
....................    if(iCurrentState[motor] == 0) 
*
0037:  MOVLW  21
0038:  ADDWF  33,W
0039:  MOVWF  04
003A:  BCF    03.7
003B:  MOVF   00,F
003C:  BTFSS  03.2
003D:  GOTO   045
....................    { 
....................       iCurrentState[motor] = 3; 
003E:  MOVLW  21
003F:  ADDWF  33,W
0040:  MOVWF  04
0041:  BCF    03.7
0042:  MOVLW  03
0043:  MOVWF  00
....................    } 
0044:  GOTO   05A
....................    else 
....................    { 
....................       iCurrentState[motor] = ((iCurrentState[motor]-1)&3); 
0045:  MOVLW  21
0046:  ADDWF  33,W
0047:  MOVWF  78
0048:  CLRF   7A
0049:  BTFSC  03.0
004A:  INCF   7A,F
004B:  MOVLW  21
004C:  ADDWF  33,W
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVLW  01
0050:  SUBWF  00,W
0051:  ANDLW  03
0052:  MOVWF  36
0053:  MOVF   78,W
0054:  MOVWF  04
0055:  BCF    03.7
0056:  BTFSC  7A.0
0057:  BSF    03.7
0058:  MOVF   36,W
0059:  MOVWF  00
....................    } 
....................    if(motor == 1) 
005A:  DECFSZ 33,W
005B:  GOTO   065
....................    { 
....................       portc = POSITIONS[iCurrentState[motor]]; 
005C:  MOVLW  21
005D:  ADDWF  33,W
005E:  MOVWF  04
005F:  BCF    03.7
0060:  MOVF   00,W
0061:  CALL   004
0062:  MOVWF  78
0063:  MOVWF  07
....................    } 
0064:  GOTO   06D
....................    else 
....................    { 
....................       portd = POSITIONS[iCurrentState[motor]]; 
0065:  MOVLW  21
0066:  ADDWF  33,W
0067:  MOVWF  04
0068:  BCF    03.7
0069:  MOVF   00,W
006A:  CALL   004
006B:  MOVWF  78
006C:  MOVWF  08
....................    } 
006D:  RETURN
....................  
.................... }    
....................  
.................... #include "lib/sensorControl.c" 
.................... #include "sensorControl.h" 
.................... #ifndef sensorControl 
.................... #define sensorControl 
....................  
.................... /*Defines*/ 
.................... #define CHANNEL_LONG_RANGE  4 
.................... #define CHANNEL_SHORT_RANGE 6 
....................  
.................... /*Function declarations*/ 
.................... void initSensors(void); 
.................... unsigned int16 readInternalAdc(unsigned int8 channel); 
.................... float readLongRangeSensor(); 
.................... float readShortRangeSensor(); 
.................... int16 readRangeSensor(); 
....................  
.................... #endif 
....................  
....................  
.................... void initSensors() 
.................... { 
....................   /* Setup the  ADC to 2.5V */ 
....................   //setup_vref(VREF_LOW | 0x0C); 
....................   setup_vref(0xEC); 
*
0017:  MOVLW  EC
0018:  BSF    03.5
0019:  MOVWF  17
....................   setup_adc(ADC_CLOCK_DIV_32); 
001A:  BCF    03.5
001B:  BCF    1F.6
001C:  BSF    1F.7
001D:  BSF    03.5
001E:  BSF    1F.7
001F:  BCF    03.5
0020:  BSF    1F.0
....................   setup_adc_ports (sAN4 | sAN6 | VSS_VREF); 
0021:  BSF    03.5
0022:  BSF    03.6
0023:  MOVF   09,W
0024:  ANDLW  C0
0025:  MOVWF  09
0026:  BCF    03.6
0027:  BSF    1F.4
0028:  BCF    1F.5
0029:  MOVLW  50
002A:  BSF    03.6
002B:  MOVWF  08
....................     
....................   /* Initially start with channel 6 */ 
....................   set_adc_channel(6); 
002C:  MOVLW  18
002D:  MOVWF  78
002E:  BCF    03.5
002F:  BCF    03.6
0030:  MOVF   1F,W
0031:  ANDLW  C3
0032:  IORWF  78,W
0033:  MOVWF  1F
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   629 (RETURN)
.................... } 
....................  
.................... int16 readRangeSensor() 
*
047A:  MOVF   7A,W
047B:  MOVWF  32
047C:  MOVF   79,W
047D:  MOVWF  31
047E:  MOVF   78,W
047F:  MOVWF  30
0480:  MOVF   77,W
0481:  MOVWF  2F
*
0539:  MOVF   7A,W
053A:  MOVWF  36
053B:  MOVF   79,W
053C:  MOVWF  35
053D:  MOVF   78,W
053E:  MOVWF  34
053F:  MOVF   77,W
0540:  MOVWF  33
.................... { 
....................    float fShortMeasRange = readShortRangeSensor(); 
....................    float fLongMeasRange = readLongRangeSensor(); 
....................     
....................    //DEBUG 
....................    return ((int16)fShortMeasRange); 
0541:  MOVF   32,W
0542:  MOVWF  3A
0543:  MOVF   31,W
0544:  MOVWF  39
0545:  MOVF   30,W
0546:  MOVWF  38
0547:  MOVF   2F,W
0548:  MOVWF  37
0549:  CALL   3A5
054A:  MOVF   79,W
054B:  GOTO   5B0
....................    //DEBUG 
....................     
....................    if(fShortMeasRange == 150) 
054C:  MOVF   32,W
054D:  MOVWF  3A
054E:  MOVF   31,W
054F:  MOVWF  39
0550:  MOVF   30,W
0551:  MOVWF  38
0552:  MOVF   2F,W
0553:  MOVWF  37
0554:  CLRF   3E
0555:  CLRF   3D
0556:  MOVLW  16
0557:  MOVWF  3C
0558:  MOVLW  86
0559:  MOVWF  3B
*
0598:  BTFSS  03.2
0599:  GOTO   5A6
....................    { 
....................       return ((int16)fLongMeasRange); 
059A:  MOVF   36,W
059B:  MOVWF  3A
059C:  MOVF   35,W
059D:  MOVWF  39
059E:  MOVF   34,W
059F:  MOVWF  38
05A0:  MOVF   33,W
05A1:  MOVWF  37
05A2:  CALL   3A5
05A3:  MOVF   79,W
05A4:  GOTO   5B0
....................    } 
05A5:  GOTO   5B0
....................    else 
....................    { 
....................       return ((int16)fShortMeasRange); 
05A6:  MOVF   32,W
05A7:  MOVWF  3A
05A8:  MOVF   31,W
05A9:  MOVWF  39
05AA:  MOVF   30,W
05AB:  MOVWF  38
05AC:  MOVF   2F,W
05AD:  MOVWF  37
05AE:  CALL   3A5
05AF:  MOVF   79,W
....................    } 
05B0:  BCF    0A.3
05B1:  BCF    0A.4
05B2:  GOTO   634 (RETURN)
.................... } 
....................  
.................... unsigned int16 readInternalAdc(unsigned int8 channel) 
.................... { 
....................   set_adc_channel(channel); 
*
00E4:  RLF    42,W
00E5:  MOVWF  77
00E6:  RLF    77,F
00E7:  MOVLW  FC
00E8:  ANDWF  77,F
00E9:  MOVF   1F,W
00EA:  ANDLW  C3
00EB:  IORWF  77,W
00EC:  MOVWF  1F
....................   delay_us(20); 
00ED:  MOVLW  0C
00EE:  MOVWF  77
00EF:  DECFSZ 77,F
00F0:  GOTO   0EF
00F1:  GOTO   0F2
00F2:  NOP
....................  
....................   read_adc(ADC_START_ONLY); // start the ADC for conversion 
00F3:  BSF    1F.1
....................    
....................   int1 done = adc_done();   // Poll on ADC result 
00F4:  BCF    43.0
00F5:  BTFSS  1F.1
00F6:  BSF    43.0
....................   while(!done)  
00F7:  BTFSC  43.0
00F8:  GOTO   0FD
....................   { 
....................     // wait until measurement is ready 
....................     done = adc_done(); 
00F9:  BCF    43.0
00FA:  BTFSS  1F.1
00FB:  BSF    43.0
00FC:  GOTO   0F7
....................   } 
....................    
....................   // read conversion result 
....................   return((int16)read_adc(ADC_READ_ONLY)); 
00FD:  BTFSC  1F.1
00FE:  GOTO   0FD
00FF:  MOVF   1E,W
0100:  MOVWF  7A
0101:  BSF    03.5
0102:  MOVF   1E,W
0103:  MOVWF  78
0104:  MOVF   7A,W
0105:  MOVWF  79
0106:  BCF    03.5
0107:  RETURN
.................... } 
....................  
.................... float readLongRangeSensor() 
*
0482:  CLRF   40
0483:  CLRF   3F
0484:  CLRF   3E
0485:  CLRF   3D
.................... { 
....................   unsigned int16 iSensorRead; 
....................   float fSensorRead; 
....................   float fCumulativeMeasurement = 0.0f; 
....................    
....................   for(int i = 0; i <10; i++) 
0486:  CLRF   41
0487:  MOVF   41,W
0488:  SUBLW  09
0489:  BTFSS  03.0
048A:  GOTO   52A
....................   { 
....................      iSensorRead = readInternalAdc(CHANNEL_LONG_RANGE); 
048B:  MOVLW  04
048C:  MOVWF  42
048D:  CALL   0E4
048E:  MOVF   79,W
048F:  MOVWF  38
0490:  MOVF   78,W
0491:  MOVWF  37
....................    
....................      if(iSensorRead >= 940) 
0492:  MOVF   38,W
0493:  SUBLW  02
0494:  BTFSC  03.0
0495:  GOTO   4A2
0496:  XORLW  FF
0497:  BTFSS  03.2
0498:  GOTO   49D
0499:  MOVF   37,W
049A:  SUBLW  AB
049B:  BTFSC  03.0
049C:  GOTO   4A2
....................      { 
....................       fSensorRead = 0; 
049D:  CLRF   3C
049E:  CLRF   3B
049F:  CLRF   3A
04A0:  CLRF   39
....................       } 
04A1:  GOTO   50E
....................       else 
....................      { 
....................          if(iSensorRead <= 630 ) 
04A2:  MOVF   38,W
04A3:  SUBLW  02
04A4:  BTFSS  03.0
04A5:  GOTO   4B3
04A6:  BTFSS  03.2
04A7:  GOTO   4AC
04A8:  MOVF   37,W
04A9:  SUBLW  76
04AA:  BTFSS  03.0
04AB:  GOTO   4B3
....................          { 
....................             fSensorRead = 500; 
04AC:  CLRF   3C
04AD:  CLRF   3B
04AE:  MOVLW  7A
04AF:  MOVWF  3A
04B0:  MOVLW  87
04B1:  MOVWF  39
....................          } 
04B2:  GOTO   50E
....................          else 
....................          { 
....................          fSensorRead = 122f / (( 2.5f * ((float) iSensorRead) ) / 1024f - 1.28f); 
04B3:  MOVF   38,W
04B4:  MOVWF  43
04B5:  MOVF   37,W
04B6:  MOVWF  42
04B7:  CALL   108
04B8:  CLRF   45
04B9:  CLRF   44
04BA:  MOVLW  20
04BB:  MOVWF  43
04BC:  MOVLW  80
04BD:  MOVWF  42
04BE:  MOVF   7A,W
04BF:  MOVWF  49
04C0:  MOVF   79,W
04C1:  MOVWF  48
04C2:  MOVF   78,W
04C3:  MOVWF  47
04C4:  MOVF   77,W
04C5:  MOVWF  46
04C6:  CALL   125
04C7:  MOVF   7A,W
04C8:  MOVWF  45
04C9:  MOVF   79,W
04CA:  MOVWF  44
04CB:  MOVF   78,W
04CC:  MOVWF  43
04CD:  MOVF   77,W
04CE:  MOVWF  42
04CF:  MOVF   7A,W
04D0:  MOVWF  49
04D1:  MOVF   79,W
04D2:  MOVWF  48
04D3:  MOVF   78,W
04D4:  MOVWF  47
04D5:  MOVF   77,W
04D6:  MOVWF  46
04D7:  CLRF   4D
04D8:  CLRF   4C
04D9:  CLRF   4B
04DA:  MOVLW  89
04DB:  MOVWF  4A
04DC:  CALL   19A
04DD:  MOVF   7A,W
04DE:  MOVWF  45
04DF:  MOVF   79,W
04E0:  MOVWF  44
04E1:  MOVF   78,W
04E2:  MOVWF  43
04E3:  MOVF   77,W
04E4:  MOVWF  42
04E5:  BSF    03.1
04E6:  MOVF   7A,W
04E7:  MOVWF  49
04E8:  MOVF   79,W
04E9:  MOVWF  48
04EA:  MOVF   78,W
04EB:  MOVWF  47
04EC:  MOVF   77,W
04ED:  MOVWF  46
04EE:  MOVLW  0A
04EF:  MOVWF  4D
04F0:  MOVLW  D7
04F1:  MOVWF  4C
04F2:  MOVLW  23
04F3:  MOVWF  4B
04F4:  MOVLW  7F
04F5:  MOVWF  4A
04F6:  CALL   264
04F7:  CLRF   49
04F8:  CLRF   48
04F9:  MOVLW  74
04FA:  MOVWF  47
04FB:  MOVLW  85
04FC:  MOVWF  46
04FD:  MOVF   7A,W
04FE:  MOVWF  4D
04FF:  MOVF   79,W
0500:  MOVWF  4C
0501:  MOVF   78,W
0502:  MOVWF  4B
0503:  MOVF   77,W
0504:  MOVWF  4A
0505:  CALL   19A
0506:  MOVF   7A,W
0507:  MOVWF  3C
0508:  MOVF   79,W
0509:  MOVWF  3B
050A:  MOVF   78,W
050B:  MOVWF  3A
050C:  MOVF   77,W
050D:  MOVWF  39
....................    //      printf("iSensorRead: %Lu \t in volt: %f \t\t", iSensorRead, (iSensorRead * 2.5f) / 1024f ); 
....................        } 
....................      } 
....................       
....................      fCumulativeMeasurement += fSensorRead;  
050E:  BCF    03.1
050F:  MOVF   40,W
0510:  MOVWF  49
0511:  MOVF   3F,W
0512:  MOVWF  48
0513:  MOVF   3E,W
0514:  MOVWF  47
0515:  MOVF   3D,W
0516:  MOVWF  46
0517:  MOVF   3C,W
0518:  MOVWF  4D
0519:  MOVF   3B,W
051A:  MOVWF  4C
051B:  MOVF   3A,W
051C:  MOVWF  4B
051D:  MOVF   39,W
051E:  MOVWF  4A
051F:  CALL   264
0520:  MOVF   7A,W
0521:  MOVWF  40
0522:  MOVF   79,W
0523:  MOVWF  3F
0524:  MOVF   78,W
0525:  MOVWF  3E
0526:  MOVF   77,W
0527:  MOVWF  3D
0528:  INCF   41,F
0529:  GOTO   487
....................    } 
....................    
....................    return (fCumulativeMeasurement/10.0f); 
052A:  MOVF   40,W
052B:  MOVWF  49
052C:  MOVF   3F,W
052D:  MOVWF  48
052E:  MOVF   3E,W
052F:  MOVWF  47
0530:  MOVF   3D,W
0531:  MOVWF  46
0532:  CLRF   4D
0533:  CLRF   4C
0534:  MOVLW  20
0535:  MOVWF  4B
0536:  MOVLW  82
0537:  MOVWF  4A
0538:  CALL   19A
.................... } 
....................  
.................... float readShortRangeSensor() 
*
03C4:  CLRF   40
03C5:  CLRF   3F
03C6:  CLRF   3E
03C7:  CLRF   3D
.................... { 
....................   unsigned int16 iSensorRead; 
....................   float fSensorRead; 
....................   float fCumulativeMeasurement = 0; 
....................    
....................   for(int i = 0; i<10; i++) 
03C8:  CLRF   41
03C9:  MOVF   41,W
03CA:  SUBLW  09
03CB:  BTFSS  03.0
03CC:  GOTO   46B
....................   { 
....................    iSensorRead = readInternalAdc(CHANNEL_SHORT_RANGE); 
03CD:  MOVLW  06
03CE:  MOVWF  42
03CF:  CALL   0E4
03D0:  MOVF   79,W
03D1:  MOVWF  38
03D2:  MOVF   78,W
03D3:  MOVWF  37
....................    // measurement below 30cm 
....................    if(iSensorRead >= 724 ) 
03D4:  MOVF   38,W
03D5:  SUBLW  01
03D6:  BTFSC  03.0
03D7:  GOTO   3E6
03D8:  XORLW  FF
03D9:  BTFSS  03.2
03DA:  GOTO   3DF
03DB:  MOVF   37,W
03DC:  SUBLW  D3
03DD:  BTFSC  03.0
03DE:  GOTO   3E6
....................    { 
....................       fSensorRead = 30; 
03DF:  CLRF   3C
03E0:  CLRF   3B
03E1:  MOVLW  70
03E2:  MOVWF  3A
03E3:  MOVLW  83
03E4:  MOVWF  39
....................    } 
03E5:  GOTO   44F
....................    else  
....................    { 
....................       // measurement above 150 
....................       if( iSensorRead <= 204 ) 
03E6:  MOVF   38,F
03E7:  BTFSS  03.2
03E8:  GOTO   3F4
03E9:  MOVF   37,W
03EA:  SUBLW  CC
03EB:  BTFSS  03.0
03EC:  GOTO   3F4
....................          fSensorRead = 150; 
03ED:  CLRF   3C
03EE:  CLRF   3B
03EF:  MOVLW  16
03F0:  MOVWF  3A
03F1:  MOVLW  86
03F2:  MOVWF  39
03F3:  GOTO   44F
....................       else 
....................          fSensorRead = 50f / (( 2.5f * ((float) iSensorRead) ) / 1024f - 0.1f);  
03F4:  MOVF   38,W
03F5:  MOVWF  43
03F6:  MOVF   37,W
03F7:  MOVWF  42
03F8:  CALL   108
03F9:  CLRF   45
03FA:  CLRF   44
03FB:  MOVLW  20
03FC:  MOVWF  43
03FD:  MOVLW  80
03FE:  MOVWF  42
03FF:  MOVF   7A,W
0400:  MOVWF  49
0401:  MOVF   79,W
0402:  MOVWF  48
0403:  MOVF   78,W
0404:  MOVWF  47
0405:  MOVF   77,W
0406:  MOVWF  46
0407:  CALL   125
0408:  MOVF   7A,W
0409:  MOVWF  45
040A:  MOVF   79,W
040B:  MOVWF  44
040C:  MOVF   78,W
040D:  MOVWF  43
040E:  MOVF   77,W
040F:  MOVWF  42
0410:  MOVF   7A,W
0411:  MOVWF  49
0412:  MOVF   79,W
0413:  MOVWF  48
0414:  MOVF   78,W
0415:  MOVWF  47
0416:  MOVF   77,W
0417:  MOVWF  46
0418:  CLRF   4D
0419:  CLRF   4C
041A:  CLRF   4B
041B:  MOVLW  89
041C:  MOVWF  4A
041D:  CALL   19A
041E:  MOVF   7A,W
041F:  MOVWF  45
0420:  MOVF   79,W
0421:  MOVWF  44
0422:  MOVF   78,W
0423:  MOVWF  43
0424:  MOVF   77,W
0425:  MOVWF  42
0426:  BSF    03.1
0427:  MOVF   7A,W
0428:  MOVWF  49
0429:  MOVF   79,W
042A:  MOVWF  48
042B:  MOVF   78,W
042C:  MOVWF  47
042D:  MOVF   77,W
042E:  MOVWF  46
042F:  MOVLW  CD
0430:  MOVWF  4D
0431:  MOVLW  CC
0432:  MOVWF  4C
0433:  MOVLW  4C
0434:  MOVWF  4B
0435:  MOVLW  7B
0436:  MOVWF  4A
0437:  CALL   264
0438:  CLRF   49
0439:  CLRF   48
043A:  MOVLW  48
043B:  MOVWF  47
043C:  MOVLW  84
043D:  MOVWF  46
043E:  MOVF   7A,W
043F:  MOVWF  4D
0440:  MOVF   79,W
0441:  MOVWF  4C
0442:  MOVF   78,W
0443:  MOVWF  4B
0444:  MOVF   77,W
0445:  MOVWF  4A
0446:  CALL   19A
0447:  MOVF   7A,W
0448:  MOVWF  3C
0449:  MOVF   79,W
044A:  MOVWF  3B
044B:  MOVF   78,W
044C:  MOVWF  3A
044D:  MOVF   77,W
044E:  MOVWF  39
....................    } 
....................    fCumulativeMeasurement += fSensorRead; 
044F:  BCF    03.1
0450:  MOVF   40,W
0451:  MOVWF  49
0452:  MOVF   3F,W
0453:  MOVWF  48
0454:  MOVF   3E,W
0455:  MOVWF  47
0456:  MOVF   3D,W
0457:  MOVWF  46
0458:  MOVF   3C,W
0459:  MOVWF  4D
045A:  MOVF   3B,W
045B:  MOVWF  4C
045C:  MOVF   3A,W
045D:  MOVWF  4B
045E:  MOVF   39,W
045F:  MOVWF  4A
0460:  CALL   264
0461:  MOVF   7A,W
0462:  MOVWF  40
0463:  MOVF   79,W
0464:  MOVWF  3F
0465:  MOVF   78,W
0466:  MOVWF  3E
0467:  MOVF   77,W
0468:  MOVWF  3D
0469:  INCF   41,F
046A:  GOTO   3C9
....................   } 
....................    
....................   return (fCumulativeMeasurement/10.0); 
046B:  MOVF   40,W
046C:  MOVWF  49
046D:  MOVF   3F,W
046E:  MOVWF  48
046F:  MOVF   3E,W
0470:  MOVWF  47
0471:  MOVF   3D,W
0472:  MOVWF  46
0473:  CLRF   4D
0474:  CLRF   4C
0475:  MOVLW  20
0476:  MOVWF  4B
0477:  MOVLW  82
0478:  MOVWF  4A
0479:  CALL   19A
.................... } 
....................  
....................  
....................  
.................... void sendMeasurements(signed int8 zAngle, signed int8 xAngle, unsigned int16 distance) 
.................... { 
....................    char characterToSend; 
....................    characterToSend = *((char*)&(zAngle)); 
*
05B3:  CLRF   35
05B4:  MOVLW  2F
05B5:  MOVWF  34
05B6:  MOVF   34,W
05B7:  MOVWF  04
05B8:  BCF    03.7
05B9:  BTFSC  35.0
05BA:  BSF    03.7
05BB:  MOVF   00,W
05BC:  MOVWF  33
....................    putc((int)characterToSend); 
05BD:  MOVF   33,W
05BE:  BTFSS  0C.4
05BF:  GOTO   5BE
05C0:  MOVWF  19
....................     
....................    characterToSend = *((char*)&(xAngle)); 
05C1:  CLRF   35
05C2:  MOVLW  30
05C3:  MOVWF  34
05C4:  MOVF   34,W
05C5:  MOVWF  04
05C6:  BCF    03.7
05C7:  BTFSC  35.0
05C8:  BSF    03.7
05C9:  MOVF   00,W
05CA:  MOVWF  33
....................    putc((int)characterToSend); 
05CB:  MOVF   33,W
05CC:  BTFSS  0C.4
05CD:  GOTO   5CC
05CE:  MOVWF  19
....................     
....................    characterToSend = *((char*)&(distance)); 
05CF:  CLRF   35
05D0:  MOVLW  31
05D1:  MOVWF  34
05D2:  MOVF   34,W
05D3:  MOVWF  04
05D4:  BCF    03.7
05D5:  BTFSC  35.0
05D6:  BSF    03.7
05D7:  MOVF   00,W
05D8:  MOVWF  33
....................    putc((int)characterToSend); 
05D9:  MOVF   33,W
05DA:  BTFSS  0C.4
05DB:  GOTO   5DA
05DC:  MOVWF  19
....................    characterToSend = *(((char*)&(distance))+1); 
05DD:  CLRF   7A
05DE:  MOVLW  32
05DF:  MOVWF  04
05E0:  BCF    03.7
05E1:  BTFSC  7A.0
05E2:  BSF    03.7
05E3:  MOVF   00,W
05E4:  MOVWF  33
....................    putc((int)characterToSend); 
05E5:  MOVF   33,W
05E6:  BTFSS  0C.4
05E7:  GOTO   5E6
05E8:  MOVWF  19
05E9:  BCF    0A.3
05EA:  BCF    0A.4
05EB:  GOTO   641 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
05EC:  MOVF   03,W
05ED:  ANDLW  1F
05EE:  MOVWF  03
05EF:  MOVLW  71
05F0:  BSF    03.5
05F1:  MOVWF  0F
05F2:  CLRF   10
05F3:  MOVF   0F,W
05F4:  BCF    03.5
05F5:  CLRF   20
05F6:  BSF    03.5
05F7:  BSF    03.6
05F8:  BCF    07.3
05F9:  MOVLW  0C
05FA:  BCF    03.6
05FB:  MOVWF  19
05FC:  MOVLW  A2
05FD:  MOVWF  18
05FE:  MOVLW  90
05FF:  BCF    03.5
0600:  MOVWF  18
0601:  CLRF   26
0602:  CLRF   25
0603:  MOVLW  13
0604:  MOVWF  24
0605:  MOVLW  88
0606:  MOVWF  23
0607:  BCF    29.0
0608:  BCF    29.1
0609:  MOVLW  FF
060A:  MOVWF  2A
060B:  BSF    03.5
060C:  BSF    03.6
060D:  MOVF   09,W
060E:  ANDLW  C0
060F:  MOVWF  09
0610:  BCF    03.6
0611:  BCF    1F.4
0612:  BCF    1F.5
0613:  MOVLW  00
0614:  BSF    03.6
0615:  MOVWF  08
0616:  BCF    03.5
0617:  CLRF   07
0618:  CLRF   08
0619:  CLRF   09
061A:  BCF    03.7
.................... { 
....................    /* Declarations */ 
....................    unsigned int16 iRangeMeasurement; 
....................    signed int8 iAngleZ, iAngleX; 
....................  
....................       /* Initialize hardware */ 
....................       setup_oscillator(OSC_8MHZ,2); 
*
0620:  MOVLW  71
0621:  BSF    03.5
0622:  MOVWF  0F
0623:  MOVLW  02
0624:  MOVWF  10
0625:  MOVF   0F,W
....................       initStepper(); 
0626:  BCF    03.5
0627:  GOTO   00C
....................       initSensors(); 
0628:  GOTO   017
....................  
....................       while(TRUE) 
....................       { 
....................          /* Move the motor and recieve motors positions */ 
....................          stepperMotorSequence(&iAngleX, &iAngleZ); 
0629:  CLRF   30
062A:  MOVLW  2E
062B:  MOVWF  2F
062C:  CLRF   32
062D:  MOVLW  2D
062E:  MOVWF  31
062F:  GOTO   093
....................          /* Wait for the motor to settle */ 
....................          delay_ms(25); // 50 works ok 
0630:  MOVLW  19
0631:  MOVWF  34
0632:  CALL   06E
....................          /* Read the sensor value */ 
....................          iRangeMeasurement = readRangeSensor(); 
0633:  GOTO   3C4
0634:  MOVF   79,W
0635:  MOVWF  2C
0636:  MOVF   78,W
0637:  MOVWF  2B
....................          /* Send the measurements to the PC */ 
....................          sendMeasurements(iAngleZ, iAngleX, iRangeMeasurement); 
0638:  MOVF   2D,W
0639:  MOVWF  2F
063A:  MOVF   2E,W
063B:  MOVWF  30
063C:  MOVF   2C,W
063D:  MOVWF  32
063E:  MOVF   2B,W
063F:  MOVWF  31
0640:  GOTO   5B3
0641:  GOTO   629
....................          //printf("%f\n", fRangeMeasurement); 
....................      } 
....................     
.................... } 
0642:  GOTO   642

Configuration Fuses:
   Word  1: 0CF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP DEBUG
   Word  2: 3FFF   BORV40 NOWRT

   Some fuses have been forced to be compatible with the ICD debugger.
