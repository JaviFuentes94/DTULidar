CCS PCM C Compiler, Version 5.026, 18875               28-nov-17 13:27

               Filename:   C:\Users\User\Google Drev\DTU Elektro\5. semester\Digital Instrumentering\30021_project\DTULidar\Servo Test\main.lst

               ROM used:   169 words (2%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           17 (5%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   05B
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.2
001A:  GOTO   01D
001B:  BTFSC  0C.2
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
....................  
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ICD=true 
.................... #device ADC=10 
....................   
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................   
.................... #use delay(internal=8000000,clock_out) 
*
0047:  MOVLW  2A
0048:  MOVWF  04
0049:  BCF    03.7
004A:  MOVF   00,W
004B:  BTFSC  03.2
004C:  GOTO   05A
004D:  MOVLW  02
004E:  MOVWF  78
004F:  CLRF   77
0050:  DECFSZ 77,F
0051:  GOTO   050
0052:  DECFSZ 78,F
0053:  GOTO   04F
0054:  MOVLW  97
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  DECFSZ 00,F
0059:  GOTO   04D
005A:  RETURN
....................   
.................... //#use rs232( baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, ERRORS) 
....................   
.................... #use RS232 (DEBUGGER) 
....................   
.................... #use  I2C(master, sda=PIN_C4, scl= PIN_C3) 
....................  
....................  
.................... //#include "lcd16216.c" 
....................  
.................... #define PWM_PERIOD_VAL 199   //250   // Calculated 
.................... #define PWM_DUTY_MIN 0 
.................... #define PWM_DUTY_MAX 800 //change 
....................  
.................... int pwm_count = 0; 
.................... int servo_angle = 0; 
....................  
....................  
.................... #int_ccp1 
.................... void ccp1_int(){ 
.................... //   output_toggle(PIN_D0); 
....................     
....................    if(pwm_count++ == 200){ 
*
0031:  MOVF   28,W
0032:  INCF   28,F
0033:  SUBLW  C8
0034:  BTFSC  03.2
....................       pwm_count = 0; 
0035:  CLRF   28
....................    } 
....................     
....................    if(pwm_count <= servo_angle){ //servo_angle 
0036:  MOVF   28,W
0037:  SUBWF  29,W
0038:  BTFSS  03.0
0039:  GOTO   03F
....................       output_high(PIN_D0);       
003A:  BSF    03.5
003B:  BCF    08.0
003C:  BCF    03.5
003D:  BSF    08.0
....................    }else{ 
003E:  GOTO   043
....................       output_low(PIN_D0); 
003F:  BSF    03.5
0040:  BCF    08.0
0041:  BCF    03.5
0042:  BCF    08.0
....................    }  
0043:  BCF    0C.2
0044:  BCF    0A.3
0045:  BCF    0A.4
0046:  GOTO   01D
.................... } 
....................  
....................  
.................... void main() 
*
005B:  MOVF   03,W
005C:  ANDLW  1F
005D:  MOVWF  03
005E:  MOVLW  71
005F:  BSF    03.5
0060:  MOVWF  0F
0061:  CLRF   10
0062:  MOVF   0F,W
0063:  BCF    06.3
0064:  BCF    03.5
0065:  BSF    06.3
0066:  MOVLW  FF
0067:  MOVWF  27
0068:  CLRF   28
0069:  CLRF   29
006A:  BSF    03.5
006B:  BSF    03.6
006C:  MOVF   09,W
006D:  ANDLW  C0
006E:  MOVWF  09
006F:  BCF    03.6
0070:  BCF    1F.4
0071:  BCF    1F.5
0072:  MOVLW  00
0073:  BSF    03.6
0074:  MOVWF  08
0075:  BCF    03.5
0076:  CLRF   07
0077:  CLRF   08
0078:  CLRF   09
0079:  BCF    03.7
.................... { 
....................     
....................  
....................    setup_oscillator(OSC_8MHZ,2); 
007A:  MOVLW  71
007B:  BSF    03.5
007C:  BCF    03.6
007D:  MOVWF  0F
007E:  MOVLW  02
007F:  MOVWF  10
0080:  MOVF   0F,W
....................    CCP_1 = 25; 
0081:  BCF    03.5
0082:  CLRF   16
0083:  MOVLW  19
0084:  MOVWF  15
....................    setup_ccp1(CCP_COMPARE_RESET_TIMER|CCP_COMPARE_INT); 
0085:  MOVLW  0B
0086:  MOVWF  17
0087:  BSF    03.5
0088:  CLRF   1B
0089:  CLRF   1C
008A:  MOVLW  01
008B:  MOVWF  1D
.................... //   setup_ccp1(CCP_COMPARE_RESET_TIMER);  
.................... //   setup_ccp1(CCP_COMPARE_INT);  
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
008C:  MOVLW  35
008D:  BCF    03.5
008E:  MOVWF  10
....................     
....................    enable_interrupts(INT_CCP1); 
008F:  BSF    03.5
0090:  BSF    0C.2
....................    enable_interrupts(GLOBAL); 
0091:  MOVLW  C0
0092:  BCF    03.5
0093:  IORWF  0B,F
....................  
....................    while(TRUE){ 
....................        
....................       while(servo_angle < 19){ 
0094:  MOVF   29,W
0095:  SUBLW  12
0096:  BTFSS  03.0
0097:  GOTO   09D
....................          servo_angle++; 
0098:  INCF   29,F
....................          delay_ms(50); 
0099:  MOVLW  32
009A:  MOVWF  2A
009B:  CALL   047
009C:  GOTO   094
....................       } 
....................       while(servo_angle > 9){ 
009D:  MOVF   29,W
009E:  SUBLW  09
009F:  BTFSC  03.0
00A0:  GOTO   0A6
....................          servo_angle--; 
00A1:  DECF   29,F
....................          delay_ms(50); 
00A2:  MOVLW  32
00A3:  MOVWF  2A
00A4:  CALL   047
00A5:  GOTO   09D
....................       } 
00A6:  GOTO   094
....................    } 
....................  
....................     
....................     
....................     
....................     
....................    while(1){ 
00A7:  GOTO   0A7
....................     
....................    } 
....................     
....................     
.................... } 
....................  
00A8:  GOTO   0A8
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 0CF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP DEBUG
   Word  2: 3FFF   BORV40 NOWRT

   Some fuses have been forced to be compatible with the ICD debugger.
