CCS PCM C Compiler, Version 5.026, 18875               28-nov-17 14:29

               Filename:   C:\Users\User\Google Drev\DTU Elektro\5. semester\Digital Instrumentering\30021_project\DTULidar\Servo Test\main.lst

               ROM used:   205 words (3%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           20 (6%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   06F
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.2
001A:  GOTO   01D
001B:  BTFSC  0C.2
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
....................  
....................  
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ICD=true 
.................... #device ADC=10 
....................   
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................   
.................... #use delay(internal=8000000,clock_out) 
*
005B:  MOVLW  2C
005C:  MOVWF  04
005D:  BCF    03.7
005E:  MOVF   00,W
005F:  BTFSC  03.2
0060:  GOTO   06E
0061:  MOVLW  02
0062:  MOVWF  78
0063:  CLRF   77
0064:  DECFSZ 77,F
0065:  GOTO   064
0066:  DECFSZ 78,F
0067:  GOTO   063
0068:  MOVLW  97
0069:  MOVWF  77
006A:  DECFSZ 77,F
006B:  GOTO   06A
006C:  DECFSZ 00,F
006D:  GOTO   061
006E:  RETURN
....................   
.................... //#use rs232( baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, ERRORS) 
....................   
.................... #use RS232 (DEBUGGER) 
....................   
.................... #use  I2C(master, sda=PIN_C4, scl= PIN_C3) 
....................  
....................  
.................... //#include "lcd16216.c" 
....................  
.................... #define PWM_PERIOD_VAL 199   //250   // Calculated 
.................... #define PWM_DUTY_MIN 0 
.................... #define PWM_DUTY_MAX 800 //change 
....................  
.................... int16 pwm_count = 0; 
.................... int16 servo_angle = 0; 
....................  
....................  
.................... #int_ccp1 
.................... void ccp1_int(){ 
.................... //   output_toggle(PIN_D0); 
....................     
....................    if(pwm_count++ == 1600){ 
*
0031:  MOVF   29,W
0032:  MOVWF  7A
0033:  MOVF   28,W
0034:  INCF   28,F
0035:  BTFSC  03.2
0036:  INCF   29,F
0037:  MOVWF  2D
0038:  MOVF   7A,W
0039:  MOVWF  2E
003A:  MOVF   2D,W
003B:  SUBLW  40
003C:  BTFSS  03.2
003D:  GOTO   044
003E:  MOVF   2E,W
003F:  SUBLW  06
0040:  BTFSS  03.2
0041:  GOTO   044
....................       pwm_count = 0; 
0042:  CLRF   29
0043:  CLRF   28
....................    } 
....................     
....................    if(pwm_count <= servo_angle){ //servo_angle 
0044:  MOVF   29,W
0045:  SUBWF  2B,W
0046:  BTFSS  03.0
0047:  GOTO   053
0048:  BTFSS  03.2
0049:  GOTO   04E
004A:  MOVF   28,W
004B:  SUBWF  2A,W
004C:  BTFSS  03.0
004D:  GOTO   053
....................       output_high(PIN_D0);       
004E:  BSF    03.5
004F:  BCF    08.0
0050:  BCF    03.5
0051:  BSF    08.0
....................    }else{ 
0052:  GOTO   057
....................       output_low(PIN_D0); 
0053:  BSF    03.5
0054:  BCF    08.0
0055:  BCF    03.5
0056:  BCF    08.0
....................    }  
0057:  BCF    0C.2
0058:  BCF    0A.3
0059:  BCF    0A.4
005A:  GOTO   01D
.................... } 
....................  
....................  
.................... void main() 
*
006F:  MOVF   03,W
0070:  ANDLW  1F
0071:  MOVWF  03
0072:  MOVLW  71
0073:  BSF    03.5
0074:  MOVWF  0F
0075:  CLRF   10
0076:  MOVF   0F,W
0077:  BCF    06.3
0078:  BCF    03.5
0079:  BSF    06.3
007A:  MOVLW  FF
007B:  MOVWF  27
007C:  CLRF   29
007D:  CLRF   28
007E:  CLRF   2B
007F:  CLRF   2A
0080:  BSF    03.5
0081:  BSF    03.6
0082:  MOVF   09,W
0083:  ANDLW  C0
0084:  MOVWF  09
0085:  BCF    03.6
0086:  BCF    1F.4
0087:  BCF    1F.5
0088:  MOVLW  00
0089:  BSF    03.6
008A:  MOVWF  08
008B:  BCF    03.5
008C:  CLRF   07
008D:  CLRF   08
008E:  CLRF   09
008F:  BCF    03.7
.................... { 
....................     
....................  
....................    setup_oscillator(OSC_8MHZ,2); 
0090:  MOVLW  71
0091:  BSF    03.5
0092:  BCF    03.6
0093:  MOVWF  0F
0094:  MOVLW  02
0095:  MOVWF  10
0096:  MOVF   0F,W
....................    CCP_1 = 50; 
0097:  BCF    03.5
0098:  CLRF   16
0099:  MOVLW  32
009A:  MOVWF  15
....................    setup_ccp1(CCP_COMPARE_RESET_TIMER|CCP_COMPARE_INT); 
009B:  MOVLW  0B
009C:  MOVWF  17
009D:  BSF    03.5
009E:  CLRF   1B
009F:  CLRF   1C
00A0:  MOVLW  01
00A1:  MOVWF  1D
.................... //   setup_ccp1(CCP_COMPARE_RESET_TIMER);  
.................... //   setup_ccp1(CCP_COMPARE_INT);  
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
00A2:  MOVLW  05
00A3:  BCF    03.5
00A4:  MOVWF  10
....................     
....................    enable_interrupts(INT_CCP1); 
00A5:  BSF    03.5
00A6:  BSF    0C.2
....................    enable_interrupts(GLOBAL); 
00A7:  MOVLW  C0
00A8:  BCF    03.5
00A9:  IORWF  0B,F
....................  
....................    while(TRUE){ 
....................        
....................       while(servo_angle < 600){ 
00AA:  MOVF   2B,W
00AB:  SUBLW  02
00AC:  BTFSS  03.0
00AD:  GOTO   0BB
00AE:  BTFSS  03.2
00AF:  GOTO   0B4
00B0:  MOVF   2A,W
00B1:  SUBLW  57
00B2:  BTFSS  03.0
00B3:  GOTO   0BB
....................          servo_angle++; 
00B4:  INCF   2A,F
00B5:  BTFSC  03.2
00B6:  INCF   2B,F
....................          delay_ms(5); 
00B7:  MOVLW  05
00B8:  MOVWF  2C
00B9:  CALL   05B
00BA:  GOTO   0AA
....................       } 
....................       while(servo_angle > 200){ 
00BB:  MOVF   2B,F
00BC:  BTFSS  03.2
00BD:  GOTO   0C2
00BE:  MOVF   2A,W
00BF:  SUBLW  C8
00C0:  BTFSC  03.0
00C1:  GOTO   0CA
....................          servo_angle--; 
00C2:  MOVF   2A,W
00C3:  BTFSC  03.2
00C4:  DECF   2B,F
00C5:  DECF   2A,F
....................          delay_ms(5); 
00C6:  MOVLW  05
00C7:  MOVWF  2C
00C8:  CALL   05B
00C9:  GOTO   0BB
....................       } 
00CA:  GOTO   0AA
....................    } 
....................  
....................     
....................     
....................     
....................     
....................    while(1){ 
00CB:  GOTO   0CB
....................     
....................    } 
....................     
....................     
.................... } 
....................  
00CC:  GOTO   0CC
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 0CF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP DEBUG
   Word  2: 3FFF   BORV40 NOWRT

   Some fuses have been forced to be compatible with the ICD debugger.
